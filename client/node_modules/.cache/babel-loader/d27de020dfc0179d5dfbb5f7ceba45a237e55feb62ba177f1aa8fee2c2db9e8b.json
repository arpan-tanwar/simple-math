{"ast":null,"code":"var _jsxFileName = \"/Users/arpan/Documents/GitHub/simple-math/client/src/component/arithmetic/arithmetic/MathInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MathInput = ({\n  setInputs,\n  inputs,\n  type,\n  difficulty,\n  operation,\n  sameDenoms,\n  mathInputNull,\n  setMathInputNull\n}) => {\n  _s();\n  const [expression, setExpression] = useState('');\n  const [inputWidth, setInputWidth] = useState('w-10 sm:w-20');\n  useEffect(() => {\n    if (mathInputNull) {\n      setExpression('');\n      setMathInputNull(false);\n    }\n  }, [difficulty, operation, sameDenoms, mathInputNull, inputWidth]);\n  const getTextWidth = length => {\n    if (length < 5) {\n      setInputWidth('w-10 sm:w-20');\n    }\n    if (length >= 5 && length < 8) {\n      setInputWidth('w-10 sm:w-28');\n    }\n    if (length >= 8 && length < 11) {\n      setInputWidth('w-10 sm:w-36');\n    }\n    if (length >= 11 && length < 14) {\n      setInputWidth('w-10 sm:w-48');\n    }\n    if (length > 14) {\n      setInputWidth('w-10 sm:w-60');\n    }\n  };\n  const handleChange = event => {\n    const inputValue = event.target.value;\n    getTextWidth(inputValue.length);\n    setExpression(inputValue);\n    // Evaluate the expression and update the result\n    if (type === 'inputNum') {\n      try {\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\n\n        // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\n        setInputs({\n          ...inputs,\n          inputNum: isNaN(evalResult) ? null : evalResult\n        });\n      } catch (error) {\n        setInputs({\n          ...inputs,\n          inputNum: null\n        });\n      }\n    }\n    if (type === 'inputDenom') {\n      try {\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\n\n        // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\n        setInputs({\n          ...inputs,\n          inputDenom: isNaN(evalResult) ? null : evalResult\n        });\n      } catch (error) {\n        setInputs({\n          ...inputs,\n          inputDenom: null\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      className: ` text-center h-5 md:h-8  bg-transparent border border-gray-400 rounded-[5px] ${inputWidth}`,\n      type: \"text\",\n      value: expression,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(MathInput, \"KmxsSm6n9TdBWwNefjCMi2EVC7Y=\");\n_c = MathInput;\nexport default MathInput;\nvar _c;\n$RefreshReg$(_c, \"MathInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MathInput","setInputs","inputs","type","difficulty","operation","sameDenoms","mathInputNull","setMathInputNull","_s","expression","setExpression","inputWidth","setInputWidth","getTextWidth","length","handleChange","event","inputValue","target","value","evalResult","eval","inputNum","isNaN","error","inputDenom","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/arpan/Documents/GitHub/simple-math/client/src/component/arithmetic/arithmetic/MathInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst MathInput = ({setInputs, inputs, type, difficulty, operation, sameDenoms, mathInputNull, setMathInputNull}) => {\n  const [expression, setExpression] = useState('');\n  const [inputWidth, setInputWidth] = useState('w-10 sm:w-20');\n  \n  useEffect(() => {\n    \n\n    if(mathInputNull){\n      setExpression('')\n      setMathInputNull(false)\n\n    }\n    \n    \n }, [difficulty, operation, sameDenoms, mathInputNull, inputWidth])\n\n const getTextWidth = (length) => {\n   if(length<5){\n    setInputWidth('w-10 sm:w-20')\n   }\n   if(length>=5 && length<8){\n    setInputWidth('w-10 sm:w-28')\n   }\n   if(length>=8 && length<11){\n    setInputWidth('w-10 sm:w-36')\n   }\n   if(length>=11 && length<14){\n    setInputWidth('w-10 sm:w-48')\n   }\n   if(length>14){\n    setInputWidth('w-10 sm:w-60')\n   }\n};\n\n\n  const handleChange = (event) => {\n    const inputValue = event.target.value;\n    getTextWidth(inputValue.length)\n    setExpression(inputValue);\n    // Evaluate the expression and update the result\n    if(type==='inputNum'){\n      try {\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\n       \n       // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\n        setInputs({...inputs, inputNum: isNaN(evalResult) ? null : evalResult })\n      } catch (error) {\n        setInputs({...inputs, inputNum:  null  })\n      }\n    }\n\n    if(type==='inputDenom'){\n      try {\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\n       \n       // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\n        setInputs({...inputs, inputDenom: isNaN(evalResult) ? null : evalResult })\n      } catch (error) {\n        setInputs({...inputs, inputDenom:  null  })\n      }\n    }\n  \n\n  };\n\n  return (\n    <div className=''>\n      <input\n        className={` text-center h-5 md:h-8  bg-transparent border border-gray-400 rounded-[5px] ${inputWidth}`}\n        type=\"text\"\n        value={expression}\n       \n        onChange={handleChange}\n      />\n    \n    </div>\n  );\n};\n\nexport default MathInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}