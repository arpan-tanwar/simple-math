{"ast":null,"code":"var _s = $RefreshSig$();\n// useShared.js\nimport { useState, useEffect, useContext } from 'react';\nfunction useShared(difficulty2) {\n  _s();\n  const [randomFrac, setRandomFrac] = useState({\n    numerator: 1,\n    denominator: 1\n  });\n  const [inputs, setInputs] = useState({\n    inputNum: 2,\n    inputDenom: 3\n  });\n  const [inputRange, setInputRange] = useState({\n    min: 1,\n    max: 9\n  });\n  function clearInputs() {\n    setInputs({\n      inputNum: null,\n      inputDenom: null\n    });\n  }\n  function getRandomNumber(min, max) {\n    let randomNumber;\n    do {\n      randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    } while (randomNumber === 0);\n    return randomNumber;\n  }\n  function getMultiplyNumber() {\n    return Math.floor(Math.random() * 3) + 2;\n  }\n  const handleNext = difficulty2 => {\n    clearInputs();\n    switch (difficulty2) {\n      case 1:\n        setInputRange({\n          min: 1,\n          max: 9\n        });\n        break;\n      case 2:\n        setInputRange({\n          min: 1,\n          max: 30\n        });\n        break;\n      case 3:\n        setInputRange({\n          min: -9,\n          max: 9\n        });\n        break;\n      case 4:\n        setInputRange({\n          min: -9,\n          max: 9\n        });\n        break;\n      default:\n        setInputRange({\n          min: 1,\n          max: 9\n        });\n        break;\n    }\n    var numerator = getRandomNumber(inputRange.min, inputRange.max);\n    var denominator = getRandomNumber(inputRange.min, inputRange.max);\n\n    // do {\n    //     var negativeCount = 0;\n    //     var numerator1 = getRandomNumber(inputRange.min, inputRange.max);\n    //     var denominator1 = getRandomNumber(inputRange.min, inputRange.max);\n\n    //     if (numerator1 < 0) negativeCount++;\n    //     if (denominator1 < 0) negativeCount++;\n\n    //      // Check if difficulty is 3 and there are more than 1 negative numbers\n    //     if (difficulty === 3 && negativeCount>1) {\n    //       continue; // Skip this iteration and generate new numbers\n    //     }             \n\n    // } while (true);\n\n    setRandomFrac({\n      numerator: numerator,\n      denominator: denominator\n    });\n  };\n\n  // Other shared functionality...\n\n  return {\n    randomFrac,\n    setRandomFrac,\n    getMultiplyNumber,\n    clearInputs,\n    inputRange,\n    getRandomNumber,\n    handleNext\n  };\n}\n_s(useShared, \"FBWsRY7WSnFBXA/5Zl6D2wlAfZA=\");\nexport default useShared;","map":{"version":3,"names":["useState","useEffect","useContext","useShared","difficulty2","_s","randomFrac","setRandomFrac","numerator","denominator","inputs","setInputs","inputNum","inputDenom","inputRange","setInputRange","min","max","clearInputs","getRandomNumber","randomNumber","Math","floor","random","getMultiplyNumber","handleNext"],"sources":["D:/Freelancing/simple-math/client/src/component/arithmetic/efractions/useShared.js"],"sourcesContent":["// useShared.js\r\nimport { useState, useEffect, useContext} from 'react';\r\n\r\nfunction useShared(difficulty2) {\r\n    const [randomFrac, setRandomFrac] = useState({\r\n        numerator : 1,\r\n        denominator : 1\r\n      })\r\n    \r\n      const [inputs, setInputs] = useState({\r\n        inputNum: 2,\r\n        inputDenom: 3\r\n      })\r\n\r\n      const [inputRange, setInputRange] = useState({\r\n        min: 1,\r\n        max: 9\r\n      })\r\n\r\n    \r\n      function clearInputs() {\r\n        setInputs({\r\n          inputNum: null,\r\n          inputDenom: null\r\n         })\r\n      }\r\n    \r\n      function getRandomNumber(min, max) {\r\n        let randomNumber;\r\n        do {\r\n          randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r\n        } \r\n        while (randomNumber===0)\r\n        \r\n        return randomNumber;\r\n      }\r\n\r\n      \r\n      function  getMultiplyNumber() {\r\n        return Math.floor(Math.random() * 3) + 2;\r\n      }\r\n      \r\n    \r\n\r\n\r\n      const handleNext = (difficulty2) => {\r\n        clearInputs()\r\n     \r\n      \r\n      switch (difficulty2) {\r\n        case 1: \r\n            setInputRange({min:1, max:9});\r\n          break;\r\n  \r\n        case 2:    \r\n        setInputRange({min:1, max:30});\r\n          break;\r\n  \r\n        case 3:\r\n          setInputRange({min:-9, max:9});\r\n        break;\r\n  \r\n        case 4:\r\n          setInputRange({min:-9, max:9});\r\n      break;\r\n  \r\n        default:\r\n          setInputRange({min:1, max:9});\r\n          break;\r\n      }\r\n\r\n      var numerator = getRandomNumber(inputRange.min, inputRange.max);\r\n      var denominator = getRandomNumber(inputRange.min, inputRange.max);\r\n     \r\n      // do {\r\n      //     var negativeCount = 0;\r\n      //     var numerator1 = getRandomNumber(inputRange.min, inputRange.max);\r\n      //     var denominator1 = getRandomNumber(inputRange.min, inputRange.max);\r\n  \r\n      //     if (numerator1 < 0) negativeCount++;\r\n      //     if (denominator1 < 0) negativeCount++;\r\n\r\n      //      // Check if difficulty is 3 and there are more than 1 negative numbers\r\n      //     if (difficulty === 3 && negativeCount>1) {\r\n      //       continue; // Skip this iteration and generate new numbers\r\n      //     }             \r\n        \r\n      // } while (true);\r\n  \r\n      setRandomFrac({\r\n          numerator: numerator,\r\n          denominator: denominator\r\n      });\r\n\r\n      \r\n    }\r\n\r\n  // Other shared functionality...\r\n\r\n  return {\r\n    \r\n     randomFrac,\r\n     setRandomFrac,\r\n     getMultiplyNumber,\r\n     clearInputs,\r\n     inputRange,\r\n     getRandomNumber,\r\n     handleNext,\r\n     \r\n\r\n  };\r\n}\r\n\r\nexport default useShared;\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAO,OAAO;AAEtD,SAASC,SAASA,CAACC,WAAW,EAAE;EAAAC,EAAA;EAC5B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC;IACzCQ,SAAS,EAAG,CAAC;IACbC,WAAW,EAAG;EAChB,CAAC,CAAC;EAEF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC;IACnCY,QAAQ,EAAE,CAAC;IACXC,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC;IAC3CgB,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE;EACP,CAAC,CAAC;EAGF,SAASC,WAAWA,CAAA,EAAG;IACrBP,SAAS,CAAC;MACRC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACb,CAAC,CAAC;EACL;EAEA,SAASM,eAAeA,CAACH,GAAG,EAAEC,GAAG,EAAE;IACjC,IAAIG,YAAY;IAChB,GAAG;MACDA,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIN,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;IAClE,CAAC,QACMI,YAAY,KAAG,CAAC;IAEvB,OAAOA,YAAY;EACrB;EAGA,SAAUI,iBAAiBA,CAAA,EAAG;IAC5B,OAAOH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EAC1C;EAKA,MAAME,UAAU,GAAIrB,WAAW,IAAK;IAClCc,WAAW,CAAC,CAAC;IAGf,QAAQd,WAAW;MACjB,KAAK,CAAC;QACFW,aAAa,CAAC;UAACC,GAAG,EAAC,CAAC;UAAEC,GAAG,EAAC;QAAC,CAAC,CAAC;QAC/B;MAEF,KAAK,CAAC;QACNF,aAAa,CAAC;UAACC,GAAG,EAAC,CAAC;UAAEC,GAAG,EAAC;QAAE,CAAC,CAAC;QAC5B;MAEF,KAAK,CAAC;QACJF,aAAa,CAAC;UAACC,GAAG,EAAC,CAAC,CAAC;UAAEC,GAAG,EAAC;QAAC,CAAC,CAAC;QAChC;MAEA,KAAK,CAAC;QACJF,aAAa,CAAC;UAACC,GAAG,EAAC,CAAC,CAAC;UAAEC,GAAG,EAAC;QAAC,CAAC,CAAC;QAClC;MAEE;QACEF,aAAa,CAAC;UAACC,GAAG,EAAC,CAAC;UAAEC,GAAG,EAAC;QAAC,CAAC,CAAC;QAC7B;IACJ;IAEA,IAAIT,SAAS,GAAGW,eAAe,CAACL,UAAU,CAACE,GAAG,EAAEF,UAAU,CAACG,GAAG,CAAC;IAC/D,IAAIR,WAAW,GAAGU,eAAe,CAACL,UAAU,CAACE,GAAG,EAAEF,UAAU,CAACG,GAAG,CAAC;;IAEjE;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;;IAEAV,aAAa,CAAC;MACVC,SAAS,EAAEA,SAAS;MACpBC,WAAW,EAAEA;IACjB,CAAC,CAAC;EAGJ,CAAC;;EAEH;;EAEA,OAAO;IAEJH,UAAU;IACVC,aAAa;IACbiB,iBAAiB;IACjBN,WAAW;IACXJ,UAAU;IACVK,eAAe;IACfM;EAGH,CAAC;AACH;AAACpB,EAAA,CA5GQF,SAAS;AA8GlB,eAAeA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}