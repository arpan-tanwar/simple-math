{"ast":null,"code":"// // useShared.js\n// import { useState, useEffect, useContext} from 'react';\n\n// function useShared() {\n//     const [randomFrac, setRandomFrac] = useState({\n//         numerator : 1,\n//         denominator : 1\n//       })\n\n//       const [inputs, setInputs] = useState({\n//         inputNum: 2,\n//         inputDenom: 3\n//       })\n\n//       function clearInputs() {\n//         setInputs({\n//           inputNum: null,\n//           inputDenom: null\n//          })\n//       }\n\n//       function getRandomNumber(min, max) {\n//         let randomNumber;\n//         do {\n//           randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n//         } \n//         while (randomNumber===0)\n\n//         return randomNumber;\n//       }\n\n//       function  getMultiplyNumber() {\n//         return Math.floor(Math.random() * 3) + 2;\n//       }\n\n//       const multiplyNumber = getMultiplyNumber()\n\n//       const handleNext = (inputRange) => {\n//         clearInputs()\n\n//       // switch (difficulty) {\n//       //   case 1: \n//       //       setInputRange({min:1, max:9});\n//       //     break;\n\n//       //   case 2:    \n//       //   setInputRange({min:1, max:30});\n//       //     break;\n\n//       //   case 3:\n//       //     setInputRange({min:-9, max:9});\n//       //   break;\n\n//       //   case 4:\n//       //     setInputRange({min:-9, max:9});\n//       // break;\n\n//       //   default:\n//       //     setInputRange({min:1, max:9});\n//       //     break;\n//       // }\n\n//       var numerator = getRandomNumber(inputRange.min, inputRange.max);\n//       var denominator = getRandomNumber(inputRange.min, inputRange.max);\n\n//       // do {\n//       //     var negativeCount = 0;\n//       //     var numerator1 = getRandomNumber(inputRange.min, inputRange.max);\n//       //     var denominator1 = getRandomNumber(inputRange.min, inputRange.max);\n\n//       //     if (numerator1 < 0) negativeCount++;\n//       //     if (denominator1 < 0) negativeCount++;\n\n//       //      // Check if difficulty is 3 and there are more than 1 negative numbers\n//       //     if (difficulty === 3 && negativeCount>1) {\n//       //       continue; // Skip this iteration and generate new numbers\n//       //     }             \n\n//       // } while (true);\n\n//       setRandomFrac({\n//           numerator: numerator,\n//           denominator: denominator\n//       });\n\n//       console.log(\"random in the fraction. \", randomFrac)\n\n//     }\n\n//   // Other shared functionality...\n\n//   return {\n\n//      randomFrac,\n//      setRandomFrac,\n//      multiplyNumber,\n//      inputs,\n//      setInputs,\n//      clearInputs,\n//      getRandomNumber,\n//      handleNext,\n\n//   };\n// }\n\n// export default useShared;","map":{"version":3,"names":[],"sources":["D:/Freelancing/simple-math/client/src/component/arithmetic/efractions/useShared.js"],"sourcesContent":["// // useShared.js\r\n// import { useState, useEffect, useContext} from 'react';\r\n\r\n// function useShared() {\r\n//     const [randomFrac, setRandomFrac] = useState({\r\n//         numerator : 1,\r\n//         denominator : 1\r\n//       })\r\n    \r\n//       const [inputs, setInputs] = useState({\r\n//         inputNum: 2,\r\n//         inputDenom: 3\r\n//       })\r\n\r\n    \r\n//       function clearInputs() {\r\n//         setInputs({\r\n//           inputNum: null,\r\n//           inputDenom: null\r\n//          })\r\n//       }\r\n    \r\n//       function getRandomNumber(min, max) {\r\n//         let randomNumber;\r\n//         do {\r\n//           randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r\n//         } \r\n//         while (randomNumber===0)\r\n        \r\n//         return randomNumber;\r\n//       }\r\n\r\n      \r\n//       function  getMultiplyNumber() {\r\n//         return Math.floor(Math.random() * 3) + 2;\r\n//       }\r\n\r\n//       const multiplyNumber = getMultiplyNumber()\r\n\r\n//       const handleNext = (inputRange) => {\r\n//         clearInputs()\r\n     \r\n  \r\n//       // switch (difficulty) {\r\n//       //   case 1: \r\n//       //       setInputRange({min:1, max:9});\r\n//       //     break;\r\n  \r\n//       //   case 2:    \r\n//       //   setInputRange({min:1, max:30});\r\n//       //     break;\r\n  \r\n//       //   case 3:\r\n//       //     setInputRange({min:-9, max:9});\r\n//       //   break;\r\n  \r\n//       //   case 4:\r\n//       //     setInputRange({min:-9, max:9});\r\n//       // break;\r\n  \r\n//       //   default:\r\n//       //     setInputRange({min:1, max:9});\r\n//       //     break;\r\n//       // }\r\n\r\n//       var numerator = getRandomNumber(inputRange.min, inputRange.max);\r\n//       var denominator = getRandomNumber(inputRange.min, inputRange.max);\r\n     \r\n//       // do {\r\n//       //     var negativeCount = 0;\r\n//       //     var numerator1 = getRandomNumber(inputRange.min, inputRange.max);\r\n//       //     var denominator1 = getRandomNumber(inputRange.min, inputRange.max);\r\n  \r\n//       //     if (numerator1 < 0) negativeCount++;\r\n//       //     if (denominator1 < 0) negativeCount++;\r\n\r\n//       //      // Check if difficulty is 3 and there are more than 1 negative numbers\r\n//       //     if (difficulty === 3 && negativeCount>1) {\r\n//       //       continue; // Skip this iteration and generate new numbers\r\n//       //     }             \r\n        \r\n//       // } while (true);\r\n  \r\n//       setRandomFrac({\r\n//           numerator: numerator,\r\n//           denominator: denominator\r\n//       });\r\n  \r\n//       console.log(\"random in the fraction. \", randomFrac)\r\n      \r\n//     }\r\n\r\n//   // Other shared functionality...\r\n\r\n//   return {\r\n    \r\n//      randomFrac,\r\n//      setRandomFrac,\r\n//      multiplyNumber,\r\n//      inputs,\r\n//      setInputs,\r\n//      clearInputs,\r\n//      getRandomNumber,\r\n//      handleNext,\r\n     \r\n\r\n//   };\r\n// }\r\n\r\n// export default useShared;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}