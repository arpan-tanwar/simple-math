{"ast":null,"code":"var _jsxFileName = \"D:\\\\Freelancing\\\\simple-math\\\\client\\\\src\\\\component\\\\arithmetic\\\\efractions\\\\MathInputFrac.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MathInputFrac = ({\n  setInputs,\n  inputs,\n  type,\n  difficulty,\n  mathInputNull,\n  setMathInputNull\n}) => {\n  _s();\n  const [expression, setExpression] = useState('');\n  const [inputWidth, setInputWidth] = useState('w-10 sm:w-20');\n  useEffect(() => {\n    if (mathInputNull) {\n      setExpression('');\n      setMathInputNull(false);\n    }\n  }, [difficulty, mathInputNull, inputWidth]);\n  const getTextWidth = length => {\n    if (length < 5) {\n      setInputWidth('w-10 sm:w-20');\n    }\n    if (length >= 5 && length < 8) {\n      setInputWidth('w-10 sm:w-28');\n    }\n    if (length >= 8 && length < 11) {\n      setInputWidth('w-10 sm:w-36');\n    }\n    if (length >= 11 && length < 14) {\n      setInputWidth('w-10 sm:w-48');\n    }\n    if (length > 14) {\n      setInputWidth('w-10 sm:w-60');\n    }\n  };\n  const handleChange = event => {\n    const inputValue = event.target.value;\n    getTextWidth(inputValue.length);\n    setExpression(inputValue);\n    // Evaluate the expression and update the result\n    if (type === 'inputNum') {\n      try {\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\n\n        // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\n        setInputs({\n          ...inputs,\n          inputNum: isNaN(evalResult) ? null : evalResult\n        });\n      } catch (error) {\n        setInputs({\n          ...inputs,\n          inputNum: null\n        });\n      }\n    }\n    if (type === 'inputDenom') {\n      try {\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\n\n        // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\n        setInputs({\n          ...inputs,\n          inputDenom: isNaN(evalResult) ? null : evalResult\n        });\n      } catch (error) {\n        setInputs({\n          ...inputs,\n          inputDenom: null\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      className: ` text-center h-5 md:h-8  bg-transparent border border-gray-400 rounded-[5px] ${inputWidth}`,\n      type: \"text\",\n      value: expression,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(MathInputFrac, \"KmxsSm6n9TdBWwNefjCMi2EVC7Y=\");\n_c = MathInputFrac;\nexport default MathInputFrac;\nvar _c;\n$RefreshReg$(_c, \"MathInputFrac\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MathInputFrac","setInputs","inputs","type","difficulty","mathInputNull","setMathInputNull","_s","expression","setExpression","inputWidth","setInputWidth","getTextWidth","length","handleChange","event","inputValue","target","value","evalResult","eval","inputNum","isNaN","error","inputDenom","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Freelancing/simple-math/client/src/component/arithmetic/efractions/MathInputFrac.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst MathInputFrac = ({setInputs, inputs,type, difficulty,  mathInputNull, setMathInputNull}) => {\r\n  const [expression, setExpression] = useState('');\r\n  const [inputWidth, setInputWidth] = useState('w-10 sm:w-20');\r\n  \r\n  useEffect(() => {\r\n    \r\n\r\n    if(mathInputNull){\r\n      setExpression('')\r\n      setMathInputNull(false)\r\n\r\n    }\r\n    \r\n    \r\n }, [difficulty, mathInputNull, inputWidth])\r\n\r\n const getTextWidth = (length) => {\r\n   if(length<5){\r\n    setInputWidth('w-10 sm:w-20')\r\n   }\r\n   if(length>=5 && length<8){\r\n    setInputWidth('w-10 sm:w-28')\r\n   }\r\n   if(length>=8 && length<11){\r\n    setInputWidth('w-10 sm:w-36')\r\n   }\r\n   if(length>=11 && length<14){\r\n    setInputWidth('w-10 sm:w-48')\r\n   }\r\n   if(length>14){\r\n    setInputWidth('w-10 sm:w-60')\r\n   }\r\n};\r\n\r\n\r\n  const handleChange = (event) => {\r\n    const inputValue = event.target.value;\r\n    getTextWidth(inputValue.length)\r\n    setExpression(inputValue);\r\n    // Evaluate the expression and update the result\r\n    if(type==='inputNum'){\r\n      try {\r\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\r\n       \r\n       // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\r\n        setInputs({...inputs, inputNum: isNaN(evalResult) ? null : evalResult })\r\n      } catch (error) {\r\n        setInputs({...inputs, inputNum:  null  })\r\n      }\r\n    }\r\n\r\n    if(type==='inputDenom'){\r\n      try {\r\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\r\n       \r\n       // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\r\n        setInputs({...inputs, inputDenom: isNaN(evalResult) ? null : evalResult })\r\n      } catch (error) {\r\n        setInputs({...inputs, inputDenom:  null  })\r\n      }\r\n    }\r\n  \r\n\r\n  };\r\n\r\n  return (\r\n    <div className=''>\r\n      <input\r\n        className={` text-center h-5 md:h-8  bg-transparent border border-gray-400 rounded-[5px] ${inputWidth}`}\r\n        type=\"text\"\r\n        value={expression}\r\n       \r\n        onChange={handleChange}\r\n      />\r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MathInputFrac;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAGA,CAAC;EAACC,SAAS;EAAEC,MAAM;EAACC,IAAI;EAAEC,UAAU;EAAGC,aAAa;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAChG,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,cAAc,CAAC;EAE5DC,SAAS,CAAC,MAAM;IAGd,IAAGQ,aAAa,EAAC;MACfI,aAAa,CAAC,EAAE,CAAC;MACjBH,gBAAgB,CAAC,KAAK,CAAC;IAEzB;EAGH,CAAC,EAAE,CAACF,UAAU,EAAEC,aAAa,EAAEK,UAAU,CAAC,CAAC;EAE3C,MAAME,YAAY,GAAIC,MAAM,IAAK;IAC/B,IAAGA,MAAM,GAAC,CAAC,EAAC;MACXF,aAAa,CAAC,cAAc,CAAC;IAC9B;IACA,IAAGE,MAAM,IAAE,CAAC,IAAIA,MAAM,GAAC,CAAC,EAAC;MACxBF,aAAa,CAAC,cAAc,CAAC;IAC9B;IACA,IAAGE,MAAM,IAAE,CAAC,IAAIA,MAAM,GAAC,EAAE,EAAC;MACzBF,aAAa,CAAC,cAAc,CAAC;IAC9B;IACA,IAAGE,MAAM,IAAE,EAAE,IAAIA,MAAM,GAAC,EAAE,EAAC;MAC1BF,aAAa,CAAC,cAAc,CAAC;IAC9B;IACA,IAAGE,MAAM,GAAC,EAAE,EAAC;MACZF,aAAa,CAAC,cAAc,CAAC;IAC9B;EACH,CAAC;EAGC,MAAMG,YAAY,GAAIC,KAAK,IAAK;IAC9B,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IACrCN,YAAY,CAACI,UAAU,CAACH,MAAM,CAAC;IAC/BJ,aAAa,CAACO,UAAU,CAAC;IACzB;IACA,IAAGb,IAAI,KAAG,UAAU,EAAC;MACnB,IAAI;QACF,MAAMgB,UAAU,GAAGC,IAAI,CAACJ,UAAU,CAAC,CAAC,CAAC;;QAEtC;QACCf,SAAS,CAAC;UAAC,GAAGC,MAAM;UAAEmB,QAAQ,EAAEC,KAAK,CAACH,UAAU,CAAC,GAAG,IAAI,GAAGA;QAAW,CAAC,CAAC;MAC1E,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdtB,SAAS,CAAC;UAAC,GAAGC,MAAM;UAAEmB,QAAQ,EAAG;QAAM,CAAC,CAAC;MAC3C;IACF;IAEA,IAAGlB,IAAI,KAAG,YAAY,EAAC;MACrB,IAAI;QACF,MAAMgB,UAAU,GAAGC,IAAI,CAACJ,UAAU,CAAC,CAAC,CAAC;;QAEtC;QACCf,SAAS,CAAC;UAAC,GAAGC,MAAM;UAAEsB,UAAU,EAAEF,KAAK,CAACH,UAAU,CAAC,GAAG,IAAI,GAAGA;QAAW,CAAC,CAAC;MAC5E,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdtB,SAAS,CAAC;UAAC,GAAGC,MAAM;UAAEsB,UAAU,EAAG;QAAM,CAAC,CAAC;MAC7C;IACF;EAGF,CAAC;EAED,oBACEzB,OAAA;IAAK0B,SAAS,EAAC,EAAE;IAAAC,QAAA,eACf3B,OAAA;MACE0B,SAAS,EAAG,gFAA+Ef,UAAW,EAAE;MACxGP,IAAI,EAAC,MAAM;MACXe,KAAK,EAAEV,UAAW;MAElBmB,QAAQ,EAAEb;IAAa;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAEV,CAAC;AAACxB,EAAA,CA7EIP,aAAa;AAAAgC,EAAA,GAAbhC,aAAa;AA+EnB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}