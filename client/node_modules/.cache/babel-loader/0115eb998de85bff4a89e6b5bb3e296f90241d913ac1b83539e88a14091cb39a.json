{"ast":null,"code":"var _jsxFileName = \"D:\\\\Freelancing\\\\simple-math\\\\client\\\\src\\\\component\\\\arithmetic\\\\efractions\\\\Fraction.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Fraction1 from './Fraction1';\nimport Fraction2 from './Fraction2';\nimport Fraction3 from './Fraction3';\nimport Fraction4 from './Fraction4';\nimport CheckModal from '../arithmetic/CheckModal';\nimport SolutionFracModal from './SolutionFracModal';\nimport Decimal1 from './Decimal1';\nimport Decimal2 from './Decimal2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Fraction = ({\n  efraction,\n  difficulty2,\n  btnFracNextRef\n}) => {\n  _s();\n  const [randomFrac, setRandomFrac] = useState({\n    numerator: 1,\n    denominator: 1\n  });\n  const [randomDec, setRandomDec] = useState({\n    numerator1: 1,\n    denominator1: 2,\n    number: 3,\n    numerator2: 4,\n    denominator2: 5\n  });\n  const [inputs, setInputs] = useState({\n    inputNum: null,\n    inputDenom: null\n  });\n  const [inputsDec, setInputsDec] = useState({\n    numerator1: null,\n    denominator1: null,\n    numerator2: null,\n    denominator2: null,\n    numerator3: null,\n    denominator3: null,\n    inputsNum: null,\n    inputsDenom: null\n  });\n  const [inputs4, setInputs4] = useState({\n    numerator: null,\n    denominator: null\n  });\n  const [inputRange, setInputRange] = useState({\n    min: 1,\n    max: 9\n  });\n  const [result, setResult] = useState(false);\n  const [showSolutionModal, setShowSolutionModal] = useState(false);\n  const [showCheckModal, setShowCheckModal] = useState(false);\n  const [multiplyNumber, setMultiplyNumber] = useState(1);\n  const [mathInputNull, setMathInputNull] = useState(false);\n  function clearInputs() {\n    setInputs({\n      inputNum: null,\n      inputDenom: null\n    });\n    setInputs4({\n      inputNum: null,\n      inputDenom: null\n    });\n  }\n  function findPrimeFactors(num) {\n    let factors = [];\n    let divisor = 2;\n    while (num > 1) {\n      if (num % divisor === 0) {\n        factors.push(divisor);\n        num /= divisor;\n      } else {\n        divisor++;\n      }\n    }\n    return factors;\n  }\n  const numFactors = findPrimeFactors(randomFrac.numerator);\n  const denomFactors = findPrimeFactors(randomFrac.denominator);\n  useEffect(() => {\n    setMultiplyNumber(getMultiplyNumber());\n    handleNext(difficulty2);\n    clearInputs();\n  }, [difficulty2, efraction]);\n  function getRandomNumber(min, max) {\n    let randomNumber;\n    do {\n      randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    } while (randomNumber === 0);\n    return randomNumber;\n  }\n  function getMultiplyNumber() {\n    return Math.floor(Math.random() * 3) + 2;\n  }\n  function simplifyFraction(numerator, denominator) {\n    if (numerator == \"\" || denominator == \"\") {\n      return;\n    }\n    // Function to find greatest common divisor (GCD) using Euclid's algorithm\n    const gcd = (a, b) => {\n      if (b === 0) {\n        return a;\n      }\n      return gcd(b, a % b);\n    };\n\n    // Find the GCD of numerator and denominator\n    const gcdValue = gcd(numerator, denominator);\n\n    // Divide both numerator and denominator by their GCD to get the smallest equivalent fraction\n    const smallestNumerator = numerator / gcdValue;\n    const smallestDenominator = denominator / gcdValue;\n    return [smallestNumerator, smallestDenominator];\n  }\n  const handleNext = difficulty2 => {\n    setMultiplyNumber(getMultiplyNumber());\n    clearInputs();\n    setMathInputNull(true);\n    switch (difficulty2) {\n      case 1:\n        setInputRange({\n          min: 1,\n          max: 9\n        });\n        break;\n      case 2:\n        setInputRange({\n          min: 1,\n          max: 30\n        });\n        break;\n      case 3:\n        setInputRange({\n          min: -9,\n          max: 9\n        });\n        break;\n      case 4:\n        setInputRange({\n          min: -9,\n          max: 9\n        });\n        break;\n      default:\n        setInputRange({\n          min: 1,\n          max: 9\n        });\n        break;\n    }\n    var numerator = getRandomNumber(inputRange.min, inputRange.max);\n    var denominator = getRandomNumber(inputRange.min, inputRange.max);\n    if (difficulty2 === 3 && numerator < 0 && denominator < 0) {\n      console.log(\"both are negative\");\n      denominator = Math.abs(denominator);\n    }\n    setRandomFrac({\n      numerator: numerator,\n      denominator: denominator\n    });\n  };\n  const handleCheck = () => {\n    let checkResult = 1;\n    let inputResult = 2;\n    const num = Number(inputs.inputNum);\n    const denom = Number(inputs.inputDenom);\n    if (efraction === 1) {\n      if (inputs.inputNum == multiplyNumber && inputs.inputDenom == multiplyNumber) {\n        checkResult = 1;\n        inputResult = 1;\n      }\n    }\n    if (efraction === 2) {\n      const [fracNum, fracDenom] = simplifyFraction(randomFrac.numerator, randomFrac.denominator);\n      const [inputNum, inputDenom] = simplifyFraction(inputs.inputNum || 2.5, inputs.inputDenom || 1.3);\n      if (fracNum == inputNum && fracDenom == inputDenom) {\n        checkResult = 1;\n        inputResult = 1;\n      }\n    }\n    if (efraction === 3) {\n      if (inputs.inputNum == randomFrac.numerator * multiplyNumber) {\n        checkResult = 1;\n        inputResult = 1;\n      }\n    }\n    if (efraction === 4) {\n      if (randomFrac.numerator >= inputs4.inputNum && randomFrac.denominator >= inputs4.inputDenom) {\n        if (inputs4.inputNum !== null && inputs4.inputDenom !== null && inputs.inputNum !== null && inputs.inputDenom !== null) {\n          const [fracNum, fracDenom] = simplifyFraction(randomFrac.numerator, randomFrac.denominator);\n          const [inputs4Num, inputs4Denom] = simplifyFraction(inputs4.inputNum, inputs4.inputDenom);\n          const [inputsNum, inputsDenom] = simplifyFraction(inputs.inputNum, inputs.inputDenom);\n          if (fracNum == inputs4Num && inputs4Num == inputsNum && fracDenom == inputs4Denom && inputs4Denom == inputsDenom && fracNum == inputs.inputNum && fracDenom == inputs.inputDenom) {\n            checkResult = 1;\n            inputResult = 1;\n          }\n        }\n      }\n    }\n    if (checkResult == inputResult) {\n      setResult(true);\n    } else {\n      setResult(false);\n    }\n    setShowCheckModal(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"math  flex justify-start  mt-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => console.log(inputsDec),\n          children: \"show\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [efraction === 1 && /*#__PURE__*/_jsxDEV(Fraction1, {\n            randomFrac: randomFrac,\n            multiplyNumber: multiplyNumber,\n            inputs: inputs,\n            setInputs: setInputs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 39\n          }, this), efraction === 2 && /*#__PURE__*/_jsxDEV(Fraction2, {\n            randomFrac: randomFrac,\n            inputs: inputs,\n            setInputs: setInputs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 39\n          }, this), efraction === 3 && /*#__PURE__*/_jsxDEV(Fraction3, {\n            randomFrac: randomFrac,\n            multiplyNumber: multiplyNumber,\n            inputs: inputs,\n            setInputs: setInputs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 39\n          }, this), efraction === 4 && /*#__PURE__*/_jsxDEV(Fraction4, {\n            randomFrac: randomFrac,\n            multiplyNumber: multiplyNumber,\n            inputs: inputs,\n            setInputs: setInputs,\n            inputs4: inputs4,\n            setInputs4: setInputs4,\n            mathInputNull: mathInputNull,\n            setMathInputNull: setMathInputNull\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 39\n          }, this), efraction === 5 && /*#__PURE__*/_jsxDEV(Decimal1, {\n            randomDec: randomDec,\n            inputsDec: inputsDec,\n            setInputsDec: setInputsDec\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 39\n          }, this), efraction === 6 && /*#__PURE__*/_jsxDEV(Decimal2, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons w-full  flex flex-row justify-start mt-14\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleCheck(),\n            className: \"btn-drill\",\n            children: \"Check\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleNext(difficulty2),\n            ref: btnFracNextRef,\n            className: \"btn-drill ml-1 md:ml-3\",\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CheckModal, {\n      showCheckModal: showCheckModal,\n      setShowSolutionModal: setShowSolutionModal,\n      setShowCheckModal: setShowCheckModal,\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SolutionFracModal, {\n      efraction: efraction,\n      showSolutionModal: showSolutionModal,\n      setShowSolutionModal: setShowSolutionModal,\n      setShowCheckModal: setShowCheckModal,\n      randomFrac: randomFrac,\n      inputs: inputs,\n      multiplyNumber: multiplyNumber,\n      numFactors: numFactors,\n      denomFactors: denomFactors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s(Fraction, \"1fR5RzEtlRbdnQ4afw92Oloh72Q=\");\n_c = Fraction;\nexport default Fraction;\nvar _c;\n$RefreshReg$(_c, \"Fraction\");","map":{"version":3,"names":["React","useState","useEffect","Fraction1","Fraction2","Fraction3","Fraction4","CheckModal","SolutionFracModal","Decimal1","Decimal2","jsxDEV","_jsxDEV","Fraction","efraction","difficulty2","btnFracNextRef","_s","randomFrac","setRandomFrac","numerator","denominator","randomDec","setRandomDec","numerator1","denominator1","number","numerator2","denominator2","inputs","setInputs","inputNum","inputDenom","inputsDec","setInputsDec","numerator3","denominator3","inputsNum","inputsDenom","inputs4","setInputs4","inputRange","setInputRange","min","max","result","setResult","showSolutionModal","setShowSolutionModal","showCheckModal","setShowCheckModal","multiplyNumber","setMultiplyNumber","mathInputNull","setMathInputNull","clearInputs","findPrimeFactors","num","factors","divisor","push","numFactors","denomFactors","getMultiplyNumber","handleNext","getRandomNumber","randomNumber","Math","floor","random","simplifyFraction","gcd","a","b","gcdValue","smallestNumerator","smallestDenominator","console","log","abs","handleCheck","checkResult","inputResult","Number","denom","fracNum","fracDenom","inputs4Num","inputs4Denom","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["D:/Freelancing/simple-math/client/src/component/arithmetic/efractions/Fraction.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Fraction1 from './Fraction1'\r\nimport Fraction2 from './Fraction2'\r\nimport Fraction3 from './Fraction3'\r\nimport Fraction4 from './Fraction4'\r\nimport CheckModal from '../arithmetic/CheckModal'\r\nimport SolutionFracModal from './SolutionFracModal'\r\nimport Decimal1 from './Decimal1'\r\nimport Decimal2 from './Decimal2'\r\n\r\n\r\n\r\n\r\n\r\nconst Fraction = ({efraction, difficulty2, btnFracNextRef}) => {\r\n\r\n  \r\n\r\n  \r\n \r\n  const [randomFrac, setRandomFrac] = useState({\r\n    numerator : 1,\r\n    denominator : 1\r\n  })\r\n\r\n  const [randomDec, setRandomDec] = useState({\r\n    numerator1 : 1,\r\n    denominator1 : 2,\r\n    number: 3,\r\n    numerator2: 4,\r\n    denominator2: 5\r\n  })\r\n\r\n  const [inputs, setInputs] = useState({\r\n    inputNum: null,\r\n    inputDenom: null\r\n  })\r\n\r\n  const [inputsDec, setInputsDec] = useState({\r\n    numerator1: null,\r\n    denominator1: null,\r\n    numerator2: null,\r\n    denominator2: null,\r\n    numerator3: null,\r\n    denominator3: null,\r\n    inputsNum: null,\r\n    inputsDenom:null\r\n\r\n  })\r\n\r\n  const [inputs4, setInputs4] = useState({\r\n    numerator: null,\r\n    denominator: null\r\n   })\r\n\r\n  const [inputRange, setInputRange] = useState({\r\n    min: 1,\r\n    max: 9\r\n  })\r\n\r\n  const [result, setResult] = useState(false)\r\n  const [showSolutionModal, setShowSolutionModal] = useState(false)\r\n  const [showCheckModal, setShowCheckModal] =  useState(false)\r\n  const [multiplyNumber, setMultiplyNumber] = useState(1)\r\n  const [mathInputNull, setMathInputNull] = useState(false)\r\n\r\n\r\n  function clearInputs() {\r\n    setInputs({\r\n      inputNum: null,\r\n      inputDenom: null\r\n     })\r\n    \r\n     setInputs4({\r\n      inputNum: null,\r\n      inputDenom: null\r\n     })\r\n  }\r\n\r\n  function findPrimeFactors(num){\r\n    let factors = [];\r\n    let divisor = 2;\r\n\r\n    while (num > 1) {\r\n        if (num % divisor === 0) {\r\n            factors.push(divisor);\r\n            num /= divisor;\r\n        } else {\r\n            divisor++;\r\n        }\r\n    }\r\n\r\n    return factors;\r\n}\r\n\r\n   const numFactors = findPrimeFactors(randomFrac.numerator)\r\n   const denomFactors = findPrimeFactors(randomFrac.denominator)\r\n\r\n\r\n  useEffect(() => {\r\n   setMultiplyNumber(getMultiplyNumber())\r\n   \r\n    handleNext(difficulty2)\r\n    clearInputs()\r\n   \r\n  }, [difficulty2, efraction]);\r\n\r\n  function getRandomNumber(min, max) {\r\n    let randomNumber;\r\n    do {\r\n      randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    } \r\n    while (randomNumber===0)\r\n    \r\n    return randomNumber;\r\n  }\r\n\r\n  \r\n  function  getMultiplyNumber() {\r\n    return Math.floor(Math.random() * 3) + 2;\r\n  }\r\n  \r\n \r\n  function simplifyFraction(numerator, denominator) {\r\n\r\n       if(numerator==\"\" || denominator==\"\"){\r\n        return;\r\n       }\r\n        // Function to find greatest common divisor (GCD) using Euclid's algorithm\r\n        const gcd = (a, b) => {\r\n            if (b === 0) {\r\n                return a;\r\n            }\r\n            return gcd(b, a % b);\r\n        };\r\n    \r\n        // Find the GCD of numerator and denominator\r\n        const gcdValue = gcd(numerator, denominator);\r\n    \r\n        // Divide both numerator and denominator by their GCD to get the smallest equivalent fraction\r\n        const smallestNumerator = numerator / gcdValue;\r\n        const smallestDenominator = denominator / gcdValue;\r\n    \r\n        return [smallestNumerator, smallestDenominator];\r\n    }\r\n\r\n\r\n\r\n  const handleNext = (difficulty2) => {\r\n    setMultiplyNumber(getMultiplyNumber())\r\n  clearInputs()\r\n  setMathInputNull(true)\r\n  switch (difficulty2) {\r\n    case 1: \r\n        setInputRange({min:1, max:9});\r\n      break;\r\n\r\n    case 2:    \r\n    setInputRange({min:1, max:30});\r\n      break;\r\n\r\n    case 3:\r\n      setInputRange({min:-9, max:9});\r\n    break;\r\n\r\n    case 4:\r\n      setInputRange({min:-9, max:9});\r\n  break;\r\n\r\n    default:\r\n      setInputRange({min:1, max:9});\r\n      break;\r\n  }\r\n\r\n  var numerator = getRandomNumber(inputRange.min, inputRange.max);\r\n  var denominator = getRandomNumber(inputRange.min, inputRange.max);\r\n \r\n\r\n  if(difficulty2===3 && numerator<0 && denominator<0){\r\n    console.log(\"both are negative\")\r\n    denominator = Math.abs(denominator)\r\n  }\r\n\r\n  setRandomFrac({\r\n      numerator: numerator,\r\n      denominator: denominator\r\n  });\r\n\r\n  \r\n\r\n  \r\n}\r\n\r\nconst handleCheck = () => {\r\n  \r\n  let checkResult=1;\r\n  let inputResult=2;\r\n\r\n  const num = Number(inputs.inputNum);\r\n  const denom = Number(inputs.inputDenom)\r\n\r\n  if(efraction===1){\r\n    if(inputs.inputNum==multiplyNumber && inputs.inputDenom==multiplyNumber){\r\n      checkResult=1;\r\n      inputResult=1;\r\n    }\r\n  }\r\n\r\n  if(efraction===2){\r\n    const [fracNum, fracDenom] = simplifyFraction(randomFrac.numerator, randomFrac.denominator)\r\n    const  [inputNum, inputDenom] = simplifyFraction(inputs.inputNum || 2.5, inputs.inputDenom || 1.3)\r\n    if(fracNum==inputNum && fracDenom==inputDenom){\r\n      checkResult=1;\r\n      inputResult=1;\r\n    }\r\n  }\r\n\r\n  if(efraction===3){\r\n    if(inputs.inputNum == randomFrac.numerator*multiplyNumber ){\r\n      checkResult=1;\r\n      inputResult=1;\r\n    }\r\n  }\r\n\r\n  if(efraction===4){\r\n    if(randomFrac.numerator>=inputs4.inputNum &&  randomFrac.denominator>=inputs4.inputDenom){\r\n      if(inputs4.inputNum!==null && inputs4.inputDenom!==null && inputs.inputNum!==null && inputs.inputDenom!==null){\r\n        const [fracNum, fracDenom] = simplifyFraction(randomFrac.numerator, randomFrac.denominator)\r\n        const [inputs4Num, inputs4Denom] = simplifyFraction(inputs4.inputNum, inputs4.inputDenom)\r\n        const [inputsNum, inputsDenom] = simplifyFraction(inputs.inputNum, inputs.inputDenom)\r\n  \r\n        if(fracNum == inputs4Num && inputs4Num == inputsNum && fracDenom == inputs4Denom && inputs4Denom == inputsDenom && fracNum==inputs.inputNum && fracDenom==inputs.inputDenom) {\r\n          checkResult=1;\r\n          inputResult=1;\r\n        }\r\n   \r\n      }\r\n     \r\n    }\r\n   \r\n  }\r\n\r\n  \r\n  if(checkResult==inputResult){\r\n    setResult(true)\r\n  }\r\n  else{\r\n    setResult(false)\r\n  }\r\n  setShowCheckModal(true)\r\n}\r\n\r\n\r\n \r\n  \r\n\r\n\r\n  \r\n\r\n  return (\r\n    <div className='flex flex-col'>\r\n        <div className='math  flex justify-start  mt-2'>\r\n              <div>\r\n                <button onClick={()=>console.log(inputsDec)}>show</button>\r\n                  <div>\r\n                    {efraction===1 && <Fraction1 randomFrac={randomFrac} multiplyNumber={multiplyNumber} inputs={inputs} setInputs={setInputs} />}    \r\n                    {efraction===2 && <Fraction2 randomFrac={randomFrac} inputs={inputs} setInputs={setInputs} />}   \r\n                    {efraction===3 && <Fraction3 randomFrac={randomFrac} multiplyNumber={multiplyNumber} inputs={inputs} setInputs={setInputs}/>} \r\n\r\n                    {efraction===4 && <Fraction4 randomFrac={randomFrac} multiplyNumber={multiplyNumber} inputs={inputs} setInputs={setInputs} inputs4={inputs4} setInputs4={setInputs4} mathInputNull={mathInputNull} setMathInputNull={setMathInputNull} />}    \r\n\r\n                    {efraction===5 && <Decimal1 randomDec={randomDec} inputsDec={inputsDec} setInputsDec={setInputsDec}/>}   \r\n                    {efraction===6 && <Decimal2/>}  \r\n                       \r\n                  </div>\r\n\r\n                  <div className='buttons w-full  flex flex-row justify-start mt-14'>\r\n                    <button onClick={()=>handleCheck()}  className='btn-drill'>Check</button>\r\n\r\n                    <button onClick={()=>handleNext(difficulty2)} ref={btnFracNextRef}  className='btn-drill ml-1 md:ml-3'>Next</button>\r\n                  </div>\r\n              </div>   \r\n        </div>   \r\n\r\n        <CheckModal showCheckModal={showCheckModal}  setShowSolutionModal={setShowSolutionModal} setShowCheckModal={setShowCheckModal} result={result} />   \r\n\r\n        <SolutionFracModal efraction={efraction} showSolutionModal={showSolutionModal} setShowSolutionModal={setShowSolutionModal}  setShowCheckModal={setShowCheckModal} randomFrac={randomFrac} inputs={inputs} multiplyNumber={multiplyNumber} numFactors={numFactors} denomFactors={denomFactors}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Fraction\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}