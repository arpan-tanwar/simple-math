{"ast":null,"code":"import React,{useState,useEffect}from'react';import Fraction1 from'./Fraction1';import Fraction2 from'./Fraction2';import Fraction3 from'./Fraction3';import Fraction4 from'./Fraction4';import CheckModal from'../arithmetic/CheckModal';import SolutionFracModal from'./SolutionFracModal';import CFraction1 from'./CFraction1';import CFraction2 from'./CFraction2';import CFraction3 from'./CFraction3';import CFraction4 from'./CFraction4';import Decimal1 from'./Decimal1';import Decimal2 from'./Decimal2';import Decimal3 from'./Decimal3';import Decimal4 from'./Decimal4';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Fraction=_ref=>{let{efraction,difficulty2,btnFracNextRef}=_ref;const[randomFrac,setRandomFrac]=useState({numerator:1,denominator:1});const[randomDec,setRandomDec]=useState({numerator1:1,denominator1:1,number:1,decimal:5,numerator2:1,denominator2:1});const[inputs,setInputs]=useState({inputNum:null,inputDenom:null});const[inputsDec,setInputsDec]=useState({numerator1:null,denominator1:null,numerator2:null,denominator2:null,numerator3:null,denominator3:null,inputsNum:null,inputsDenom:null});const[inputs4,setInputs4]=useState({numerator:null,denominator:null});const[inputRange,setInputRange]=useState({min:1,max:9});const[result,setResult]=useState(false);const[showSolutionModal,setShowSolutionModal]=useState(false);const[showCheckModal,setShowCheckModal]=useState(false);const[multiplyNumber,setMultiplyNumber]=useState(1);const[mathInputNull,setMathInputNull]=useState(false);function clearInputs(){setInputs({inputNum:null,inputDenom:null});setInputs4({inputNum:null,inputDenom:null});setInputsDec({numerator1:null,denominator1:null,numerator2:null,denominator2:null,numerator3:null,denominator3:null,inputsNum:null,inputsDenom:null});}function findPrimeFactors(num){let factors=[];let divisor=2;while(num>1){if(num%divisor===0){factors.push(divisor);num/=divisor;}else{divisor++;}}return factors;}const numFactors=findPrimeFactors(randomFrac.numerator);const denomFactors=findPrimeFactors(randomFrac.denominator);useEffect(()=>{setMultiplyNumber(getMultiplyNumber());handleNext(difficulty2);clearInputs();},[difficulty2,efraction]);function getRandomNumber(min,max){let randomNumber;do{randomNumber=Math.floor(Math.random()*(max-min+1))+min;}while(randomNumber===0);return randomNumber;}function getMultiplyNumber(){return Math.floor(Math.random()*3)+2;}function simplifyFraction(numerator,denominator){if(numerator==\"\"||denominator==\"\"){return;}// Function to find greatest common divisor (GCD) using Euclid's algorithm\nconst gcd=(a,b)=>{if(b===0){return a;}return gcd(b,a%b);};// Find the GCD of numerator and denominator\nconst gcdValue=gcd(numerator,denominator);// Divide both numerator and denominator by their GCD to get the smallest equivalent fraction\nconst smallestNumerator=numerator/gcdValue;const smallestDenominator=denominator/gcdValue;return[smallestNumerator,smallestDenominator];}const handleNext=difficulty2=>{setMultiplyNumber(getMultiplyNumber());clearInputs();setMathInputNull(true);const decimalPoint=getRandomNumber(2,9);switch(difficulty2){case 1:setInputRange({min:1,max:9});break;case 2:setInputRange({min:1,max:30});break;case 3:setInputRange({min:-9,max:9});break;case 4:setInputRange({min:-9,max:9});break;default:setInputRange({min:1,max:9});break;}//////--------/////////-------random numbers for fractions -----//////////-------///////////////////\nvar numerator=getRandomNumber(inputRange.min,inputRange.max);var denominator=getRandomNumber(inputRange.min,inputRange.max);if(difficulty2===3&&numerator<0&&denominator<0){console.log(\"both are negative\");denominator=Math.abs(denominator);}setRandomFrac({numerator:numerator,denominator:denominator});////////------/////////----------- random numbers for decimal -------///////////------------/////////////////\nvar numerator1=getRandomNumber(inputRange.min,inputRange.max);var denominator1=getRandomNumber(inputRange.min,inputRange.max);var num=getRandomNumber(inputRange.min,inputRange.max);var numerator2=getRandomNumber(inputRange.min,inputRange.max);var denominato2=getRandomNumber(inputRange.min,inputRange.max);setRandomDec({numerator1:numerator1,denominator1:denominator1,number:num,decimal:decimalPoint,numerator2:numerator2,denominator2:denominato2});};const handleCheck=()=>{let checkResult=1;let inputResult=2;const num=Number(inputs.inputNum);const denom=Number(inputs.inputDenom);if(efraction===1){if(inputs.inputNum==multiplyNumber&&inputs.inputDenom==multiplyNumber){checkResult=1;inputResult=1;}}if(efraction===2){const[fracNum,fracDenom]=simplifyFraction(randomFrac.numerator,randomFrac.denominator);const[inputNum,inputDenom]=simplifyFraction(inputs.inputNum||2.5,inputs.inputDenom||1.3);if(fracNum==inputNum&&fracDenom==inputDenom){checkResult=1;inputResult=1;}}if(efraction===3){if(inputs.inputNum==randomFrac.numerator*multiplyNumber){checkResult=1;inputResult=1;}}if(efraction===4){if(randomFrac.numerator>=inputs4.inputNum&&randomFrac.denominator>=inputs4.inputDenom){if(inputs4.inputNum!==null&&inputs4.inputDenom!==null&&inputs.inputNum!==null&&inputs.inputDenom!==null){const[fracNum,fracDenom]=simplifyFraction(randomFrac.numerator,randomFrac.denominator);const[inputs4Num,inputs4Denom]=simplifyFraction(inputs4.inputNum,inputs4.inputDenom);const[inputsNum,inputsDenom]=simplifyFraction(inputs.inputNum,inputs.inputDenom);if(fracNum==inputs4Num&&inputs4Num==inputsNum&&fracDenom==inputs4Denom&&inputs4Denom==inputsDenom&&fracNum==inputs.inputNum&&fracDenom==inputs.inputDenom){checkResult=1;inputResult=1;}}}}/////--------////////---------- complex fraction checks --------/////////----------///////////////////\nif(efraction===5){if(inputsDec.numerator1!==null&&inputsDec.denominator1!==null&&inputsDec.numerator2!==null&&inputsDec.denominator2!==null&&inputsDec.numerator3!==null&&inputsDec.denominator3!==null&&inputsDec.inputsNum!==null&&inputsDec.inputsDenom!==null){const[simplyNum,simplyDenom]=simplifyFraction(randomDec.number*randomDec.denominator2+randomDec.numerator2,randomDec.denominator2);//////----------------- multiply random numbers for final  check --------///////////////\nconst[simplyRandomNum,simplyRandomDenom]=simplifyFraction(simplyNum*randomDec.numerator1,simplyDenom*randomDec.denominator1);//////------------------- multiply random numbers with inputs-3 for final check ------//////////\nconst[simplyInputs3Num,simplyInputs3Denom]=simplifyFraction(randomDec.numerator1*inputsDec.numerator3,randomDec.denominator1*inputsDec.denominator3);/////-------------------- simplify the last Inputs for final check ----------////////////////////\nconst[simplyInputsNum,simplyInputsDenom]=simplifyFraction(inputsDec.inputsNum,inputsDec.inputsDenom);if(randomDec.number==Number(inputsDec.numerator1)&&inputsDec.denominator1==1&&randomDec.numerator2==Number(inputsDec.numerator2)&&randomDec.denominator2==Number(inputsDec.denominator2)&&simplyRandomNum==simplyInputs3Num&&simplyRandomDenom==simplyInputs3Denom&&simplyRandomNum==simplyInputsNum&&simplyRandomDenom==simplyInputsDenom){checkResult=1;inputResult=1;}}}if(efraction===6){if(inputsDec.numerator1!==null&&inputsDec.denominator1!==null&&inputsDec.numerator2!==null&&inputsDec.denominator2!==null&&inputsDec.numerator3!==null&&inputsDec.denominator3!==null&&inputsDec.inputsNum!==null&&inputsDec.inputsDenom!==null){const[simplyNum,simplyDenom]=simplifyFraction(randomDec.number*randomDec.denominator2+randomDec.numerator2,randomDec.denominator2);//////----------------- multiply random numbers for final  check --------///////////////\nconst[simplyRandomNum,simplyRandomDenom]=simplifyFraction(simplyDenom*randomDec.numerator1,simplyNum*randomDec.denominator1);//////------------------- multiply random numbers with inputs-3 for final check ------//////////\nconst[simplyInputs3Num,simplyInputs3Denom]=simplifyFraction(randomDec.numerator1*inputsDec.denominator3,randomDec.denominator1*inputsDec.numerator3);/////-------------------- simplify the last Inputs for final check ----------////////////////////\nconst[simplyInputsNum,simplyInputsDenom]=simplifyFraction(inputsDec.inputsNum,inputsDec.inputsDenom);if(randomDec.number==Number(inputsDec.numerator1)&&inputsDec.denominator1==1&&randomDec.numerator2==Number(inputsDec.numerator2)&&randomDec.denominator2==Number(inputsDec.denominator2)&&simplyRandomNum==simplyInputs3Num&&simplyRandomDenom==simplyInputs3Denom&&simplyRandomNum==simplyInputsNum&&simplyRandomDenom==simplyInputsDenom){checkResult=1;inputResult=1;}}}if(efraction===7){if(inputsDec.numerator1!==null&&inputsDec.denominator1!==null&&inputsDec.numerator2!==null&&inputsDec.denominator2!==null&&inputsDec.numerator3!==null&&inputsDec.denominator3!==null&&inputsDec.inputsNum!==null&&inputsDec.inputsDenom!==null){const[simplyNum,simplyDenom]=simplifyFraction(randomDec.number*randomDec.denominator2+randomDec.numerator2,randomDec.denominator2);//////----------------- multiply random numbers for final  check --------///////////////\nconst[simplyRandomNum,simplyRandomDenom]=simplifyFraction(randomDec.numerator1*simplyDenom+simplyNum*randomDec.denominator1,randomDec.denominator1*simplyDenom);//////------------------- multiply random numbers with inputs-3 for final check ------//////////\nconst[simplyInputs3Num,simplyInputs3Denom]=simplifyFraction(randomDec.numerator1*inputsDec.denominator3+inputsDec.numerator3*randomDec.denominator1,randomDec.denominator1*inputsDec.denominator3);/////-------------------- simplify the last Inputs for final check ----------////////////////////\nconst[simplyInputsNum,simplyInputsDenom]=simplifyFraction(inputsDec.inputsNum,inputsDec.inputsDenom);console.log(\"simply frac\",simplyRandomNum,simplyRandomDenom,simplyInputs3Num,simplyInputs3Denom,simplyInputsNum,simplyInputsDenom);if(randomDec.number==Number(inputsDec.numerator1)&&inputsDec.denominator1==1&&randomDec.numerator2==Number(inputsDec.numerator2)&&randomDec.denominator2==Number(inputsDec.denominator2)&&simplyRandomNum==simplyInputs3Num&&simplyRandomDenom==simplyInputs3Denom&&simplyRandomNum==simplyInputsNum&&simplyRandomDenom==simplyInputsDenom){checkResult=1;inputResult=1;}}}if(efraction===8){if(inputsDec.numerator1!==null&&inputsDec.denominator1!==null&&inputsDec.numerator2!==null&&inputsDec.denominator2!==null&&inputsDec.numerator3!==null&&inputsDec.denominator3!==null&&inputsDec.inputsNum!==null&&inputsDec.inputsDenom!==null){const[simplyNum,simplyDenom]=simplifyFraction(randomDec.number*randomDec.denominator2+randomDec.numerator2,randomDec.denominator2);//////----------------- multiply random numbers for final  check --------///////////////\nconst[simplyRandomNum,simplyRandomDenom]=simplifyFraction(randomDec.numerator1*simplyDenom-simplyNum*randomDec.denominator1,randomDec.denominator1*simplyDenom);//////------------------- multiply random numbers with inputs-3 for final check ------//////////\nconst[simplyInputs3Num,simplyInputs3Denom]=simplifyFraction(randomDec.numerator1*inputsDec.denominator3-inputsDec.numerator3*randomDec.denominator1,randomDec.denominator1*inputsDec.denominator3);/////-------------------- simplify the last Inputs for final check ----------////////////////////\nconst[simplyInputsNum,simplyInputsDenom]=simplifyFraction(inputsDec.inputsNum,inputsDec.inputsDenom);console.log(\"simply frac\",simplyRandomNum,simplyRandomDenom,simplyInputs3Num,simplyInputs3Denom,simplyInputsNum,simplyInputsDenom);if(randomDec.number==Number(inputsDec.numerator1)&&inputsDec.denominator1==1&&randomDec.numerator2==Number(inputsDec.numerator2)&&randomDec.denominator2==Number(inputsDec.denominator2)&&simplyRandomNum==simplyInputs3Num&&simplyRandomDenom==simplyInputs3Denom&&simplyRandomNum==simplyInputsNum&&simplyRandomDenom==simplyInputsDenom){checkResult=1;inputResult=1;}}}/////////-------------------------------- final result check -------------------//////////////////\nif(checkResult==inputResult){setResult(true);}else{setResult(false);}setShowCheckModal(true);};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"math  flex justify-start  mt-2\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[efraction===1&&/*#__PURE__*/_jsx(Fraction1,{randomFrac:randomFrac,multiplyNumber:multiplyNumber,inputs:inputs,setInputs:setInputs}),efraction===2&&/*#__PURE__*/_jsx(Fraction2,{randomFrac:randomFrac,inputs:inputs,setInputs:setInputs}),efraction===3&&/*#__PURE__*/_jsx(Fraction3,{randomFrac:randomFrac,multiplyNumber:multiplyNumber,inputs:inputs,setInputs:setInputs}),efraction===4&&/*#__PURE__*/_jsx(Fraction4,{randomFrac:randomFrac,multiplyNumber:multiplyNumber,inputs:inputs,setInputs:setInputs,inputs4:inputs4,setInputs4:setInputs4,mathInputNull:mathInputNull,setMathInputNull:setMathInputNull}),efraction===5&&/*#__PURE__*/_jsx(CFraction1,{randomDec:randomDec,inputsDec:inputsDec,setInputsDec:setInputsDec,mathInputNull:mathInputNull,setMathInputNull:setMathInputNull}),efraction===6&&/*#__PURE__*/_jsx(CFraction2,{randomDec:randomDec,inputsDec:inputsDec,setInputsDec:setInputsDec,mathInputNull:mathInputNull,setMathInputNull:setMathInputNull}),efraction===7&&/*#__PURE__*/_jsx(CFraction3,{randomDec:randomDec,inputsDec:inputsDec,setInputsDec:setInputsDec,mathInputNull:mathInputNull,setMathInputNull:setMathInputNull}),efraction===8&&/*#__PURE__*/_jsx(CFraction4,{randomDec:randomDec,inputsDec:inputsDec,setInputsDec:setInputsDec,mathInputNull:mathInputNull,setMathInputNull:setMathInputNull}),efraction===9&&/*#__PURE__*/_jsx(Decimal1,{randomDec:randomDec,inputsDec:inputsDec,setInputsDec:setInputsDec,mathInputNull:mathInputNull,setMathInputNull:setMathInputNull}),efraction===10&&/*#__PURE__*/_jsx(Decimal2,{randomDec:randomDec,inputsDec:inputsDec,setInputsDec:setInputsDec,mathInputNull:mathInputNull,setMathInputNull:setMathInputNull}),efraction===11&&/*#__PURE__*/_jsx(Decimal3,{randomDec:randomDec,inputsDec:inputsDec,setInputsDec:setInputsDec,mathInputNull:mathInputNull,setMathInputNull:setMathInputNull}),efraction===12&&/*#__PURE__*/_jsx(Decimal4,{randomDec:randomDec,inputsDec:inputsDec,setInputsDec:setInputsDec,mathInputNull:mathInputNull,setMathInputNull:setMathInputNull})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"buttons w-full  flex flex-row justify-start mt-14\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleCheck(),className:\"btn-drill\",children:\"Check\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleNext(difficulty2),ref:btnFracNextRef,className:\"btn-drill ml-1 md:ml-3\",children:\"Next\"})]})]})}),/*#__PURE__*/_jsx(CheckModal,{showCheckModal:showCheckModal,setShowSolutionModal:setShowSolutionModal,setShowCheckModal:setShowCheckModal,result:result}),/*#__PURE__*/_jsx(SolutionFracModal,{efraction:efraction,showSolutionModal:showSolutionModal,setShowSolutionModal:setShowSolutionModal,setShowCheckModal:setShowCheckModal,randomFrac:randomFrac,inputs:inputs,multiplyNumber:multiplyNumber,numFactors:numFactors,denomFactors:denomFactors,randomDec:randomDec,inputsDec:inputsDec})]});};export default Fraction;","map":{"version":3,"names":["React","useState","useEffect","Fraction1","Fraction2","Fraction3","Fraction4","CheckModal","SolutionFracModal","CFraction1","CFraction2","CFraction3","CFraction4","Decimal1","Decimal2","Decimal3","Decimal4","jsx","_jsx","jsxs","_jsxs","Fraction","_ref","efraction","difficulty2","btnFracNextRef","randomFrac","setRandomFrac","numerator","denominator","randomDec","setRandomDec","numerator1","denominator1","number","decimal","numerator2","denominator2","inputs","setInputs","inputNum","inputDenom","inputsDec","setInputsDec","numerator3","denominator3","inputsNum","inputsDenom","inputs4","setInputs4","inputRange","setInputRange","min","max","result","setResult","showSolutionModal","setShowSolutionModal","showCheckModal","setShowCheckModal","multiplyNumber","setMultiplyNumber","mathInputNull","setMathInputNull","clearInputs","findPrimeFactors","num","factors","divisor","push","numFactors","denomFactors","getMultiplyNumber","handleNext","getRandomNumber","randomNumber","Math","floor","random","simplifyFraction","gcd","a","b","gcdValue","smallestNumerator","smallestDenominator","decimalPoint","console","log","abs","denominato2","handleCheck","checkResult","inputResult","Number","denom","fracNum","fracDenom","inputs4Num","inputs4Denom","simplyNum","simplyDenom","simplyRandomNum","simplyRandomDenom","simplyInputs3Num","simplyInputs3Denom","simplyInputsNum","simplyInputsDenom","className","children","onClick","ref"],"sources":["/Users/arpan/Documents/GitHub/simple-math/client/src/component/arithmetic/efractions/Fraction.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Fraction1 from './Fraction1'\nimport Fraction2 from './Fraction2'\nimport Fraction3 from './Fraction3'\nimport Fraction4 from './Fraction4'\nimport CheckModal from '../arithmetic/CheckModal'\nimport SolutionFracModal from './SolutionFracModal'\nimport CFraction1 from './CFraction1'\nimport CFraction2 from './CFraction2'\nimport CFraction3 from './CFraction3'\nimport CFraction4 from './CFraction4'\nimport Decimal1 from './Decimal1'\nimport Decimal2 from './Decimal2'\nimport Decimal3 from './Decimal3'\nimport Decimal4 from './Decimal4'\n\n\n\n\n\n\nconst Fraction = ({efraction, difficulty2, btnFracNextRef}) => {\n\n  \n\n  \n \n  const [randomFrac, setRandomFrac] = useState({\n    numerator : 1,\n    denominator : 1\n  })\n\n  const [randomDec, setRandomDec] = useState({\n    numerator1 : 1,\n    denominator1 : 1,\n    number: 1,\n    decimal: 5,\n    numerator2: 1,\n    denominator2: 1\n  })\n\n  const [inputs, setInputs] = useState({\n    inputNum: null,\n    inputDenom: null\n  })\n\n  const [inputsDec, setInputsDec] = useState({\n    numerator1: null,\n    denominator1: null,\n    numerator2: null,\n    denominator2: null,\n    numerator3: null,\n    denominator3: null,\n    inputsNum: null,\n    inputsDenom:null\n\n  })\n\n  const [inputs4, setInputs4] = useState({\n    numerator: null,\n    denominator: null\n   })\n\n  const [inputRange, setInputRange] = useState({\n    min: 1,\n    max: 9\n  })\n\n  const [result, setResult] = useState(false)\n  const [showSolutionModal, setShowSolutionModal] = useState(false)\n  const [showCheckModal, setShowCheckModal] =  useState(false)\n  const [multiplyNumber, setMultiplyNumber] = useState(1)\n  const [mathInputNull, setMathInputNull] = useState(false)\n\n\n  function clearInputs() {\n    setInputs({\n      inputNum: null,\n      inputDenom: null\n     })\n    \n     setInputs4({\n      inputNum: null,\n      inputDenom: null\n     })\n\n     setInputsDec({\n      numerator1: null,\n      denominator1: null,\n      numerator2: null,\n      denominator2: null,\n      numerator3: null,\n      denominator3: null,\n      inputsNum: null,\n      inputsDenom:null\n     })\n  }\n\n  function findPrimeFactors(num){\n    let factors = [];\n    let divisor = 2;\n\n    while (num > 1) {\n        if (num % divisor === 0) {\n            factors.push(divisor);\n            num /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n\n    return factors;\n}\n\n   const numFactors = findPrimeFactors(randomFrac.numerator)\n   const denomFactors = findPrimeFactors(randomFrac.denominator)\n\n\n  useEffect(() => {\n   setMultiplyNumber(getMultiplyNumber())\n   \n    handleNext(difficulty2)\n    clearInputs()\n\n    \n   \n  }, [difficulty2, efraction]);\n\n  function getRandomNumber(min, max) {\n    let randomNumber;\n    do {\n      randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    } \n    while (randomNumber===0)\n    \n    return randomNumber;\n  }\n\n  \n  function  getMultiplyNumber() {\n    return Math.floor(Math.random() * 3) + 2;\n  }\n  \n \n  function simplifyFraction(numerator, denominator) {\n\n       if(numerator==\"\" || denominator==\"\"){\n        return;\n       }\n        // Function to find greatest common divisor (GCD) using Euclid's algorithm\n        const gcd = (a, b) => {\n            if (b === 0) {\n                return a;\n            }\n            return gcd(b, a % b);\n        };\n    \n        // Find the GCD of numerator and denominator\n        const gcdValue = gcd(numerator, denominator);\n    \n        // Divide both numerator and denominator by their GCD to get the smallest equivalent fraction\n        const smallestNumerator = numerator / gcdValue;\n        const smallestDenominator = denominator / gcdValue;\n    \n        return [smallestNumerator, smallestDenominator];\n    }\n\n\n\n  const handleNext = (difficulty2) => {\n    setMultiplyNumber(getMultiplyNumber())\n  clearInputs()\n  setMathInputNull(true)\n  const decimalPoint = getRandomNumber(2,9)\n  \n  switch (difficulty2) {\n    case 1: \n        setInputRange({min:1, max:9});\n      break;\n\n    case 2:    \n    setInputRange({min:1, max:30});\n      break;\n\n    case 3:\n      setInputRange({min:-9, max:9});\n    break;\n\n    case 4:\n      setInputRange({min:-9, max:9});\n  break;\n\n    default:\n      setInputRange({min:1, max:9});\n      break;\n  }\n//////--------/////////-------random numbers for fractions -----//////////-------///////////////////\n  var numerator = getRandomNumber(inputRange.min, inputRange.max);\n  var denominator = getRandomNumber(inputRange.min, inputRange.max);\n \n\n  if(difficulty2===3 && numerator<0 && denominator<0){\n    console.log(\"both are negative\")\n    denominator = Math.abs(denominator)\n  }\n\n  setRandomFrac({\n      numerator: numerator,\n      denominator: denominator\n  });\n////////------/////////----------- random numbers for decimal -------///////////------------/////////////////\n  \n  var numerator1 = getRandomNumber(inputRange.min, inputRange.max);\n  var denominator1 = getRandomNumber(inputRange.min, inputRange.max);\n  var num = getRandomNumber(inputRange.min, inputRange.max)\n  var numerator2 = getRandomNumber(inputRange.min, inputRange.max);\n  var denominato2 = getRandomNumber(inputRange.min, inputRange.max);\n\n  setRandomDec({\n    numerator1: numerator1,\n    denominator1: denominator1,\n    number: num,\n    decimal: decimalPoint,\n    numerator2: numerator2,\n    denominator2: denominato2\n  })\n}\n\nconst handleCheck = () => {\n  \n  let checkResult=1;\n  let inputResult=2;\n\n  const num = Number(inputs.inputNum);\n  const denom = Number(inputs.inputDenom)\n\n  if(efraction===1){\n    if(inputs.inputNum==multiplyNumber && inputs.inputDenom==multiplyNumber){\n      checkResult=1;\n      inputResult=1;\n    }\n  }\n\n  if(efraction===2){\n    const [fracNum, fracDenom] = simplifyFraction(randomFrac.numerator, randomFrac.denominator)\n    const  [inputNum, inputDenom] = simplifyFraction(inputs.inputNum || 2.5, inputs.inputDenom || 1.3)\n    if(fracNum==inputNum && fracDenom==inputDenom){\n      checkResult=1;\n      inputResult=1;\n    }\n  }\n\n  if(efraction===3){\n    if(inputs.inputNum == randomFrac.numerator*multiplyNumber ){\n      checkResult=1;\n      inputResult=1;\n    }\n  }\n\n  if(efraction===4){\n    if(randomFrac.numerator>=inputs4.inputNum &&  randomFrac.denominator>=inputs4.inputDenom){\n      if(inputs4.inputNum!==null && inputs4.inputDenom!==null && inputs.inputNum!==null && inputs.inputDenom!==null){\n        const [fracNum, fracDenom] = simplifyFraction(randomFrac.numerator, randomFrac.denominator)\n        const [inputs4Num, inputs4Denom] = simplifyFraction(inputs4.inputNum, inputs4.inputDenom)\n        const [inputsNum, inputsDenom] = simplifyFraction(inputs.inputNum, inputs.inputDenom)\n  \n        if(fracNum == inputs4Num && inputs4Num == inputsNum && fracDenom == inputs4Denom && inputs4Denom == inputsDenom && fracNum==inputs.inputNum && fracDenom==inputs.inputDenom) {\n          checkResult=1;\n          inputResult=1;\n        }\n   \n      }\n     \n    }\n   \n  }\n/////--------////////---------- complex fraction checks --------/////////----------///////////////////\n  if(efraction===5){ \n     if (inputsDec.numerator1!==null && inputsDec.denominator1!== null &&\n         inputsDec.numerator2!==null && inputsDec.denominator2!== null &&\n         inputsDec.numerator3!==null && inputsDec.denominator3!== null &&\n         inputsDec.inputsNum!==null && inputsDec.inputsDenom!==null)\n         {\n\n         \n     const [simplyNum, simplyDenom] =  simplifyFraction(randomDec.number * randomDec.denominator2 + randomDec.numerator2, randomDec.denominator2)\n    \n    //////----------------- multiply random numbers for final  check --------///////////////\n    const [simplyRandomNum, simplyRandomDenom] = simplifyFraction(simplyNum * randomDec.numerator1, simplyDenom * randomDec.denominator1) \n    \n    //////------------------- multiply random numbers with inputs-3 for final check ------//////////\n    const [simplyInputs3Num, simplyInputs3Denom] = simplifyFraction(randomDec.numerator1 * inputsDec.numerator3, randomDec.denominator1 * inputsDec.denominator3)\n    \n    /////-------------------- simplify the last Inputs for final check ----------////////////////////\n    const [simplyInputsNum, simplyInputsDenom] = simplifyFraction(inputsDec.inputsNum, inputsDec.inputsDenom)\n    \n\n    if(randomDec.number== Number(inputsDec.numerator1) &&\n       inputsDec.denominator1==1 &&\n       randomDec.numerator2== Number(inputsDec.numerator2) &&\n       randomDec.denominator2== Number(inputsDec.denominator2) &&\n\n       simplyRandomNum== simplyInputs3Num &&\n       simplyRandomDenom== simplyInputs3Denom &&\n      \n       simplyRandomNum == simplyInputsNum &&\n       simplyRandomDenom == simplyInputsDenom) \n      {\n        checkResult=1\n        inputResult=1\n      }\n\n    }\n  }\n\n  if(efraction===6){ \n    if (inputsDec.numerator1!==null && inputsDec.denominator1!== null &&\n        inputsDec.numerator2!==null && inputsDec.denominator2!== null &&\n        inputsDec.numerator3!==null && inputsDec.denominator3!== null &&\n        inputsDec.inputsNum!==null && inputsDec.inputsDenom!==null)\n        {\n\n        \n    const [simplyNum, simplyDenom] =  simplifyFraction(randomDec.number * randomDec.denominator2 + randomDec.numerator2, randomDec.denominator2)\n   \n   //////----------------- multiply random numbers for final  check --------///////////////\n   const [simplyRandomNum, simplyRandomDenom] = simplifyFraction(simplyDenom * randomDec.numerator1, simplyNum * randomDec.denominator1) \n   \n   //////------------------- multiply random numbers with inputs-3 for final check ------//////////\n   const [simplyInputs3Num, simplyInputs3Denom] = simplifyFraction(randomDec.numerator1 * inputsDec.denominator3, randomDec.denominator1 * inputsDec.numerator3)\n   \n   /////-------------------- simplify the last Inputs for final check ----------////////////////////\n   const [simplyInputsNum, simplyInputsDenom] = simplifyFraction(inputsDec.inputsNum, inputsDec.inputsDenom)\n   \n\n\n   if(randomDec.number== Number(inputsDec.numerator1) &&\n      inputsDec.denominator1==1 &&\n      randomDec.numerator2== Number(inputsDec.numerator2) &&\n      randomDec.denominator2== Number(inputsDec.denominator2) &&\n\n      simplyRandomNum== simplyInputs3Num &&\n      simplyRandomDenom== simplyInputs3Denom &&\n     \n      simplyRandomNum == simplyInputsNum &&\n      simplyRandomDenom == simplyInputsDenom) \n     {\n       checkResult=1\n       inputResult=1\n     }\n\n   }\n }\n\n  if(efraction===7){ \n    if (inputsDec.numerator1!==null && inputsDec.denominator1!== null &&\n        inputsDec.numerator2!==null && inputsDec.denominator2!== null &&\n        inputsDec.numerator3!==null && inputsDec.denominator3!== null &&\n        inputsDec.inputsNum!==null && inputsDec.inputsDenom!==null)\n        {\n\n        \n    const [simplyNum, simplyDenom] =  simplifyFraction(randomDec.number * randomDec.denominator2 + randomDec.numerator2, randomDec.denominator2)\n   \n   //////----------------- multiply random numbers for final  check --------///////////////\n   const [simplyRandomNum, simplyRandomDenom] = simplifyFraction((randomDec.numerator1*simplyDenom)+(simplyNum*randomDec.denominator1), randomDec.denominator1*simplyDenom) \n   \n   //////------------------- multiply random numbers with inputs-3 for final check ------//////////\n   const [simplyInputs3Num, simplyInputs3Denom] = simplifyFraction((randomDec.numerator1*inputsDec.denominator3)+(inputsDec.numerator3*randomDec.denominator1), randomDec.denominator1*inputsDec.denominator3)\n   \n   /////-------------------- simplify the last Inputs for final check ----------////////////////////\n   const [simplyInputsNum, simplyInputsDenom] = simplifyFraction(inputsDec.inputsNum, inputsDec.inputsDenom)\n   \n   console.log(\"simply frac\", simplyRandomNum, simplyRandomDenom, simplyInputs3Num, simplyInputs3Denom, simplyInputsNum, simplyInputsDenom)\n\n   if(randomDec.number== Number(inputsDec.numerator1) &&\n      inputsDec.denominator1==1 &&\n      randomDec.numerator2== Number(inputsDec.numerator2) &&\n      randomDec.denominator2==Number(inputsDec.denominator2)  &&\n\n      simplyRandomNum== simplyInputs3Num &&\n      simplyRandomDenom== simplyInputs3Denom &&\n     \n      simplyRandomNum == simplyInputsNum &&\n      simplyRandomDenom == simplyInputsDenom) \n     {\n       checkResult=1\n       inputResult=1\n     }\n\n   }\n }\n\n if(efraction===8){ \n  if (inputsDec.numerator1!==null && inputsDec.denominator1!== null &&\n      inputsDec.numerator2!==null && inputsDec.denominator2!== null &&\n      inputsDec.numerator3!==null && inputsDec.denominator3!== null &&\n      inputsDec.inputsNum!==null && inputsDec.inputsDenom!==null)\n      {\n\n      \n  const [simplyNum, simplyDenom] =  simplifyFraction(randomDec.number * randomDec.denominator2 + randomDec.numerator2, randomDec.denominator2)\n \n //////----------------- multiply random numbers for final  check --------///////////////\n const [simplyRandomNum, simplyRandomDenom] = simplifyFraction((randomDec.numerator1*simplyDenom)-(simplyNum*randomDec.denominator1), randomDec.denominator1*simplyDenom) \n \n //////------------------- multiply random numbers with inputs-3 for final check ------//////////\n const [simplyInputs3Num, simplyInputs3Denom] = simplifyFraction((randomDec.numerator1*inputsDec.denominator3)-(inputsDec.numerator3*randomDec.denominator1), randomDec.denominator1*inputsDec.denominator3)\n \n /////-------------------- simplify the last Inputs for final check ----------////////////////////\n const [simplyInputsNum, simplyInputsDenom] = simplifyFraction(inputsDec.inputsNum, inputsDec.inputsDenom)\n \n console.log(\"simply frac\", simplyRandomNum, simplyRandomDenom, simplyInputs3Num, simplyInputs3Denom, simplyInputsNum, simplyInputsDenom)\n\n if(randomDec.number== Number(inputsDec.numerator1) &&\n    inputsDec.denominator1==1 &&\n    randomDec.numerator2== Number(inputsDec.numerator2) &&\n    randomDec.denominator2==Number(inputsDec.denominator2)  &&\n\n    simplyRandomNum== simplyInputs3Num &&\n    simplyRandomDenom== simplyInputs3Denom &&\n   \n    simplyRandomNum == simplyInputsNum &&\n    simplyRandomDenom == simplyInputsDenom) \n   {\n     checkResult=1\n     inputResult=1\n   }\n\n }\n}\n\n\n\n  \n\n  /////////-------------------------------- final result check -------------------//////////////////\n  if(checkResult==inputResult){\n    setResult(true)\n  }\n  else{\n    setResult(false)\n  }\n  setShowCheckModal(true)\n}\n\n\n \n  \n\n\n  \n\n  return (\n    <div className='flex flex-col'>\n        <div className='math  flex justify-start  mt-2'>\n              <div>\n                  <div>\n                    {efraction===1 && <Fraction1 randomFrac={randomFrac} multiplyNumber={multiplyNumber} inputs={inputs} setInputs={setInputs} />}    \n                    {efraction===2 && <Fraction2 randomFrac={randomFrac} inputs={inputs} setInputs={setInputs} />}   \n                    {efraction===3 && <Fraction3 randomFrac={randomFrac} multiplyNumber={multiplyNumber} inputs={inputs} setInputs={setInputs}/>} \n\n                    {efraction===4 && <Fraction4 randomFrac={randomFrac} multiplyNumber={multiplyNumber} inputs={inputs} setInputs={setInputs} inputs4={inputs4} setInputs4={setInputs4} mathInputNull={mathInputNull} setMathInputNull={setMathInputNull} />}    \n                     \n                    {efraction===5 && <CFraction1 randomDec={randomDec} inputsDec={inputsDec} setInputsDec={setInputsDec} mathInputNull={mathInputNull} setMathInputNull={setMathInputNull}  />}  \n                    {efraction===6 && <CFraction2 randomDec={randomDec} inputsDec={inputsDec} setInputsDec={setInputsDec} mathInputNull={mathInputNull} setMathInputNull={setMathInputNull} />}  \n                    {efraction===7 && <CFraction3 randomDec={randomDec} inputsDec={inputsDec} setInputsDec={setInputsDec} mathInputNull={mathInputNull} setMathInputNull={setMathInputNull}  />}  \n                    {efraction===8 && <CFraction4 randomDec={randomDec} inputsDec={inputsDec} setInputsDec={setInputsDec} mathInputNull={mathInputNull} setMathInputNull={setMathInputNull}  />}  \n\n                    {efraction===9 && <Decimal1 randomDec={randomDec} inputsDec={inputsDec} setInputsDec={setInputsDec} mathInputNull={mathInputNull} setMathInputNull={setMathInputNull} />}   \n                    {efraction===10 && <Decimal2 randomDec={randomDec} inputsDec={inputsDec} setInputsDec={setInputsDec} mathInputNull={mathInputNull} setMathInputNull={setMathInputNull} />}  \n\n                    {efraction===11 && <Decimal3 randomDec={randomDec} inputsDec={inputsDec} setInputsDec={setInputsDec} mathInputNull={mathInputNull} setMathInputNull={setMathInputNull}/>}\n                    {efraction===12 && <Decimal4 randomDec={randomDec} inputsDec={inputsDec} setInputsDec={setInputsDec} mathInputNull={mathInputNull} setMathInputNull={setMathInputNull} />}\n                       \n                  </div>\n\n                  <div className='buttons w-full  flex flex-row justify-start mt-14'>\n                    <button onClick={()=>handleCheck()}  className='btn-drill'>Check</button>\n\n                    <button onClick={()=>handleNext(difficulty2)} ref={btnFracNextRef}  className='btn-drill ml-1 md:ml-3'>Next</button>\n                  </div>\n              </div>   \n        </div>   \n\n        <CheckModal showCheckModal={showCheckModal}  setShowSolutionModal={setShowSolutionModal} setShowCheckModal={setShowCheckModal} result={result} />   \n\n        <SolutionFracModal efraction={efraction} showSolutionModal={showSolutionModal} setShowSolutionModal={setShowSolutionModal}  setShowCheckModal={setShowCheckModal} randomFrac={randomFrac} inputs={inputs} multiplyNumber={multiplyNumber} numFactors={numFactors} denomFactors={denomFactors} randomDec={randomDec} inputsDec={inputsDec}/>\n    </div>\n  )\n}\n\nexport default Fraction\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}