{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const MathInput=_ref=>{let{index,randomSheetArray,setRandomSheetArray,type,difficulty,operation,sameDenoms}=_ref;const[expression,setExpression]=useState('');useEffect(()=>{console.log(\"randomSheetArray in MathInput\",randomSheetArray);setExpression('');},[difficulty,operation,sameDenoms]);const handleChange=event=>{const inputValue=event.target.value;setExpression(inputValue);const newArray=[...randomSheetArray];const objectToUpdate=newArray[index];// Validate input\n// Evaluate the expression and update the specified field of the object\ntry{const evalResult=eval(inputValue);// Use of eval can be dangerous, make sure to validate the input\nif(type==='inputNum'){objectToUpdate.inputNum=isNaN(evalResult)?null:evalResult;}else if(type==='inputDenom'){objectToUpdate.inputDenom=isNaN(evalResult)?null:evalResult;}}catch(error){if(type==='inputNum'){objectToUpdate.inputNum=null;}else if(type==='inputDenom'){objectToUpdate.inputDenom=null;}}// Update the array with the modified object\nnewArray[index]=objectToUpdate;setRandomSheetArray(newArray);};return/*#__PURE__*/_jsx(\"div\",{className:\"\",children:/*#__PURE__*/_jsx(\"input\",{className:\"input-digit input\",type:\"text\",value:expression,onChange:handleChange})});};export default MathInput;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","MathInput","_ref","index","randomSheetArray","setRandomSheetArray","type","difficulty","operation","sameDenoms","expression","setExpression","console","log","handleChange","event","inputValue","target","value","newArray","objectToUpdate","evalResult","eval","inputNum","isNaN","inputDenom","error","className","children","onChange"],"sources":["D:/Freelancing/simple-math/client/src/component/arithmetic/arithmetic/MathArrayInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst MathInput = ({ index, randomSheetArray, setRandomSheetArray, type, difficulty, operation, sameDenoms }) => {\r\n  const [expression, setExpression] = useState('');\r\n\r\n  useEffect(() => {\r\n    console.log(\"randomSheetArray in MathInput\", randomSheetArray);\r\n    setExpression('');\r\n  }, [difficulty, operation, sameDenoms]);\r\n\r\n  const handleChange = (event) => {\r\n    const inputValue = event.target.value;\r\n    setExpression(inputValue);\r\n    \r\n    const newArray = [...randomSheetArray];\r\n    const objectToUpdate = newArray[index];\r\n\r\n    // Validate input\r\n  \r\n\r\n    // Evaluate the expression and update the specified field of the object\r\n    try {\r\n      const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\r\n      if (type === 'inputNum') {\r\n        objectToUpdate.inputNum = isNaN(evalResult) ? null : evalResult;\r\n      } else if (type === 'inputDenom') {\r\n        objectToUpdate.inputDenom = isNaN(evalResult) ? null : evalResult;\r\n      }\r\n    } catch (error) {\r\n      if (type === 'inputNum') {\r\n        objectToUpdate.inputNum = null;\r\n      } else if (type === 'inputDenom') {\r\n        objectToUpdate.inputDenom = null;\r\n      }\r\n    }\r\n\r\n    // Update the array with the modified object\r\n    newArray[index] = objectToUpdate;\r\n    setRandomSheetArray(newArray);\r\n  };\r\n\r\n  return (\r\n    <div className=''>\r\n      <input\r\n        className='input-digit input'\r\n        type=\"text\"\r\n        value={expression}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MathInput;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAGnD,KAAM,CAAAC,SAAS,CAAGC,IAAA,EAA+F,IAA9F,CAAEC,KAAK,CAAEC,gBAAgB,CAAEC,mBAAmB,CAAEC,IAAI,CAAEC,UAAU,CAAEC,SAAS,CAAEC,UAAW,CAAC,CAAAP,IAAA,CAC1G,KAAM,CAACQ,UAAU,CAAEC,aAAa,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CAEhDC,SAAS,CAAC,IAAM,CACdc,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAET,gBAAgB,CAAC,CAC9DO,aAAa,CAAC,EAAE,CAAC,CACnB,CAAC,CAAE,CAACJ,UAAU,CAAEC,SAAS,CAAEC,UAAU,CAAC,CAAC,CAEvC,KAAM,CAAAK,YAAY,CAAIC,KAAK,EAAK,CAC9B,KAAM,CAAAC,UAAU,CAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CACrCP,aAAa,CAACK,UAAU,CAAC,CAEzB,KAAM,CAAAG,QAAQ,CAAG,CAAC,GAAGf,gBAAgB,CAAC,CACtC,KAAM,CAAAgB,cAAc,CAAGD,QAAQ,CAAChB,KAAK,CAAC,CAEtC;AAGA;AACA,GAAI,CACF,KAAM,CAAAkB,UAAU,CAAGC,IAAI,CAACN,UAAU,CAAC,CAAE;AACrC,GAAIV,IAAI,GAAK,UAAU,CAAE,CACvBc,cAAc,CAACG,QAAQ,CAAGC,KAAK,CAACH,UAAU,CAAC,CAAG,IAAI,CAAGA,UAAU,CACjE,CAAC,IAAM,IAAIf,IAAI,GAAK,YAAY,CAAE,CAChCc,cAAc,CAACK,UAAU,CAAGD,KAAK,CAACH,UAAU,CAAC,CAAG,IAAI,CAAGA,UAAU,CACnE,CACF,CAAE,MAAOK,KAAK,CAAE,CACd,GAAIpB,IAAI,GAAK,UAAU,CAAE,CACvBc,cAAc,CAACG,QAAQ,CAAG,IAAI,CAChC,CAAC,IAAM,IAAIjB,IAAI,GAAK,YAAY,CAAE,CAChCc,cAAc,CAACK,UAAU,CAAG,IAAI,CAClC,CACF,CAEA;AACAN,QAAQ,CAAChB,KAAK,CAAC,CAAGiB,cAAc,CAChCf,mBAAmB,CAACc,QAAQ,CAAC,CAC/B,CAAC,CAED,mBACEnB,IAAA,QAAK2B,SAAS,CAAC,EAAE,CAAAC,QAAA,cACf5B,IAAA,UACE2B,SAAS,CAAC,mBAAmB,CAC7BrB,IAAI,CAAC,MAAM,CACXY,KAAK,CAAER,UAAW,CAClBmB,QAAQ,CAAEf,YAAa,CACxB,CAAC,CACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}