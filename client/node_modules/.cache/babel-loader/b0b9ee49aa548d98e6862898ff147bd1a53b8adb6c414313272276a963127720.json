{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const MathInput=_ref=>{let{setInputs,inputs,type,difficulty,operation,sameDenoms}=_ref;const[expression,setExpression]=useState('');useEffect(()=>{console.log(\"inputs in mathInput\",inputs);setExpression('');},[difficulty,operation,sameDenoms]);const handleChange=event=>{const inputValue=event.target.value;setExpression(inputValue);// Evaluate the expression and update the result\nif(type==='inputNum'){try{const evalResult=eval(inputValue);// Use of eval can be dangerous, make sure to validate the input\n// setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\nsetInputs({...inputs,inputNum:isNaN(evalResult)?null:evalResult});}catch(error){setInputs({...inputs,inputNum:null});}}if(type==='inputDenom'){try{const evalResult=eval(inputValue);// Use of eval can be dangerous, make sure to validate the input\n// setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\nsetInputs({...inputs,inputDenom:isNaN(evalResult)?null:evalResult});}catch(error){setInputs({...inputs,inputDenom:null});}}};return/*#__PURE__*/_jsx(\"div\",{className:\"\",children:/*#__PURE__*/_jsx(\"input\",{className:\"input-digit   input\",type:\"text\",value:expression,onChange:handleChange})});};export default MathInput;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","MathInput","_ref","setInputs","inputs","type","difficulty","operation","sameDenoms","expression","setExpression","console","log","handleChange","event","inputValue","target","value","evalResult","eval","inputNum","isNaN","error","inputDenom","className","children","onChange"],"sources":["D:/Freelancing/simple-math/client/src/component/arithmetic/arithmetic/MathInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst MathInput = ({setInputs, inputs, type, difficulty, operation, sameDenoms}) => {\r\n  const [expression, setExpression] = useState('');\r\n\r\n  useEffect(() => {\r\n    console.log(\"inputs in mathInput\", inputs)\r\n    setExpression('')\r\n \r\n }, [difficulty, operation, sameDenoms])\r\n\r\n  const handleChange = (event) => {\r\n    const inputValue = event.target.value;\r\n    setExpression(inputValue);\r\n    // Evaluate the expression and update the result\r\n    if(type==='inputNum'){\r\n      try {\r\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\r\n       \r\n       // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\r\n        setInputs({...inputs, inputNum: isNaN(evalResult) ? null : evalResult })\r\n      } catch (error) {\r\n        setInputs({...inputs, inputNum:  null  })\r\n      }\r\n    }\r\n\r\n    if(type==='inputDenom'){\r\n      try {\r\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\r\n       \r\n       // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\r\n        setInputs({...inputs, inputDenom: isNaN(evalResult) ? null : evalResult })\r\n      } catch (error) {\r\n        setInputs({...inputs, inputDenom:  null  })\r\n      }\r\n    }\r\n  \r\n\r\n  };\r\n\r\n  return (\r\n    <div className=''>\r\n      <input\r\n        className='input-digit   input'\r\n        type=\"text\"\r\n        value={expression}\r\n        onChange={handleChange}\r\n      />\r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MathInput;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEnD,KAAM,CAAAC,SAAS,CAAGC,IAAA,EAAkE,IAAjE,CAACC,SAAS,CAAEC,MAAM,CAAEC,IAAI,CAAEC,UAAU,CAAEC,SAAS,CAAEC,UAAU,CAAC,CAAAN,IAAA,CAC7E,KAAM,CAACO,UAAU,CAAEC,aAAa,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAEhDC,SAAS,CAAC,IAAM,CACda,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAER,MAAM,CAAC,CAC1CM,aAAa,CAAC,EAAE,CAAC,CAEpB,CAAC,CAAE,CAACJ,UAAU,CAAEC,SAAS,CAAEC,UAAU,CAAC,CAAC,CAEtC,KAAM,CAAAK,YAAY,CAAIC,KAAK,EAAK,CAC9B,KAAM,CAAAC,UAAU,CAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CACrCP,aAAa,CAACK,UAAU,CAAC,CACzB;AACA,GAAGV,IAAI,GAAG,UAAU,CAAC,CACnB,GAAI,CACF,KAAM,CAAAa,UAAU,CAAGC,IAAI,CAACJ,UAAU,CAAC,CAAE;AAEtC;AACCZ,SAAS,CAAC,CAAC,GAAGC,MAAM,CAAEgB,QAAQ,CAAEC,KAAK,CAACH,UAAU,CAAC,CAAG,IAAI,CAAGA,UAAW,CAAC,CAAC,CAC1E,CAAE,MAAOI,KAAK,CAAE,CACdnB,SAAS,CAAC,CAAC,GAAGC,MAAM,CAAEgB,QAAQ,CAAG,IAAM,CAAC,CAAC,CAC3C,CACF,CAEA,GAAGf,IAAI,GAAG,YAAY,CAAC,CACrB,GAAI,CACF,KAAM,CAAAa,UAAU,CAAGC,IAAI,CAACJ,UAAU,CAAC,CAAE;AAEtC;AACCZ,SAAS,CAAC,CAAC,GAAGC,MAAM,CAAEmB,UAAU,CAAEF,KAAK,CAACH,UAAU,CAAC,CAAG,IAAI,CAAGA,UAAW,CAAC,CAAC,CAC5E,CAAE,MAAOI,KAAK,CAAE,CACdnB,SAAS,CAAC,CAAC,GAAGC,MAAM,CAAEmB,UAAU,CAAG,IAAM,CAAC,CAAC,CAC7C,CACF,CAGF,CAAC,CAED,mBACEvB,IAAA,QAAKwB,SAAS,CAAC,EAAE,CAAAC,QAAA,cACfzB,IAAA,UACEwB,SAAS,CAAC,qBAAqB,CAC/BnB,IAAI,CAAC,MAAM,CACXY,KAAK,CAAER,UAAW,CAClBiB,QAAQ,CAAEb,YAAa,CACxB,CAAC,CAEC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAZ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}