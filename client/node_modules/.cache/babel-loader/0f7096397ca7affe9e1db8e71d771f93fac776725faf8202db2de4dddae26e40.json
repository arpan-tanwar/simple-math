{"ast":null,"code":"var _s = $RefreshSig$();\n// useShared.js\nimport { useState, useEffect, useContext } from 'react';\nfunction useShared() {\n  _s();\n  const [randomFrac, setRandomFrac] = useState({\n    numerator: 1,\n    denominator: 1\n  });\n  const [inputs, setInputs] = useState({\n    inputNum: 2,\n    inputDenom: 3\n  });\n  function clearInputs() {\n    setInputs({\n      inputNum: null,\n      inputDenom: null\n    });\n  }\n  function getRandomNumber(min, max) {\n    let randomNumber;\n    do {\n      randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    } while (randomNumber === 0);\n    return randomNumber;\n  }\n  function getMultiplyNumber() {\n    return Math.floor(Math.random() * 3) + 2;\n  }\n  const multiplyNumber = getMultiplyNumber();\n  const handleNext = (difficulty, inputRange) => {\n    clearInputs();\n\n    // switch (difficulty) {\n    //   case 1: \n    //       setInputRange({min:1, max:9});\n    //     break;\n\n    //   case 2:    \n    //   setInputRange({min:1, max:30});\n    //     break;\n\n    //   case 3:\n    //     setInputRange({min:-9, max:9});\n    //   break;\n\n    //   case 4:\n    //     setInputRange({min:-9, max:9});\n    // break;\n\n    //   default:\n    //     setInputRange({min:1, max:9});\n    //     break;\n    // }\n\n    var numerator = getRandomNumber(inputRange.min, inputRange.max);\n    var denominator = getRandomNumber(inputRange.min, inputRange.max);\n\n    // do {\n    //     var negativeCount = 0;\n    //     var numerator1 = getRandomNumber(inputRange.min, inputRange.max);\n    //     var denominator1 = getRandomNumber(inputRange.min, inputRange.max);\n\n    //     if (numerator1 < 0) negativeCount++;\n    //     if (denominator1 < 0) negativeCount++;\n\n    //      // Check if difficulty is 3 and there are more than 1 negative numbers\n    //     if (difficulty === 3 && negativeCount>1) {\n    //       continue; // Skip this iteration and generate new numbers\n    //     }             \n\n    // } while (true);\n\n    setRandomFrac({\n      numerator: numerator,\n      denominator: denominator\n    });\n    console.log(\"random in the fraction. \", randomFrac);\n  };\n\n  // Other shared functionality...\n\n  return {\n    difficulty,\n    randomFrac,\n    setRandomFrac,\n    multiplyNumber,\n    inputs,\n    setInputs,\n    clearInputs,\n    getRandomNumber,\n    handleNext\n  };\n}\n_s(useShared, \"MPdNVxrxsftFY7P6y5O8VkRaRN0=\");\nexport default useShared;","map":{"version":3,"names":["useState","useEffect","useContext","useShared","_s","randomFrac","setRandomFrac","numerator","denominator","inputs","setInputs","inputNum","inputDenom","clearInputs","getRandomNumber","min","max","randomNumber","Math","floor","random","getMultiplyNumber","multiplyNumber","handleNext","difficulty","inputRange","console","log"],"sources":["D:/Freelancing/simple-math/client/src/component/arithmetic/efractions/useShared.js"],"sourcesContent":["// useShared.js\r\nimport { useState, useEffect, useContext} from 'react';\r\n\r\nfunction useShared() {\r\n    const [randomFrac, setRandomFrac] = useState({\r\n        numerator : 1,\r\n        denominator : 1\r\n      })\r\n    \r\n      const [inputs, setInputs] = useState({\r\n        inputNum: 2,\r\n        inputDenom: 3\r\n      })\r\n\r\n    \r\n      function clearInputs() {\r\n        setInputs({\r\n          inputNum: null,\r\n          inputDenom: null\r\n         })\r\n      }\r\n    \r\n      function getRandomNumber(min, max) {\r\n        let randomNumber;\r\n        do {\r\n          randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r\n        } \r\n        while (randomNumber===0)\r\n        \r\n        return randomNumber;\r\n      }\r\n\r\n      \r\n      function  getMultiplyNumber() {\r\n        return Math.floor(Math.random() * 3) + 2;\r\n      }\r\n\r\n      const multiplyNumber = getMultiplyNumber()\r\n\r\n      const handleNext = (difficulty, inputRange) => {\r\n        clearInputs()\r\n     \r\n  \r\n      // switch (difficulty) {\r\n      //   case 1: \r\n      //       setInputRange({min:1, max:9});\r\n      //     break;\r\n  \r\n      //   case 2:    \r\n      //   setInputRange({min:1, max:30});\r\n      //     break;\r\n  \r\n      //   case 3:\r\n      //     setInputRange({min:-9, max:9});\r\n      //   break;\r\n  \r\n      //   case 4:\r\n      //     setInputRange({min:-9, max:9});\r\n      // break;\r\n  \r\n      //   default:\r\n      //     setInputRange({min:1, max:9});\r\n      //     break;\r\n      // }\r\n\r\n      var numerator = getRandomNumber(inputRange.min, inputRange.max);\r\n      var denominator = getRandomNumber(inputRange.min, inputRange.max);\r\n     \r\n      // do {\r\n      //     var negativeCount = 0;\r\n      //     var numerator1 = getRandomNumber(inputRange.min, inputRange.max);\r\n      //     var denominator1 = getRandomNumber(inputRange.min, inputRange.max);\r\n  \r\n      //     if (numerator1 < 0) negativeCount++;\r\n      //     if (denominator1 < 0) negativeCount++;\r\n\r\n      //      // Check if difficulty is 3 and there are more than 1 negative numbers\r\n      //     if (difficulty === 3 && negativeCount>1) {\r\n      //       continue; // Skip this iteration and generate new numbers\r\n      //     }             \r\n        \r\n      // } while (true);\r\n  \r\n      setRandomFrac({\r\n          numerator: numerator,\r\n          denominator: denominator\r\n      });\r\n  \r\n      console.log(\"random in the fraction. \", randomFrac)\r\n      \r\n    }\r\n\r\n  // Other shared functionality...\r\n\r\n  return {\r\n    difficulty,\r\n     randomFrac,\r\n     setRandomFrac,\r\n     multiplyNumber,\r\n     inputs,\r\n     setInputs,\r\n     clearInputs,\r\n     getRandomNumber,\r\n     handleNext,\r\n     \r\n\r\n  };\r\n}\r\n\r\nexport default useShared;\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAO,OAAO;AAEtD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC;IACzCO,SAAS,EAAG,CAAC;IACbC,WAAW,EAAG;EAChB,CAAC,CAAC;EAEF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC;IACnCW,QAAQ,EAAE,CAAC;IACXC,UAAU,EAAE;EACd,CAAC,CAAC;EAGF,SAASC,WAAWA,CAAA,EAAG;IACrBH,SAAS,CAAC;MACRC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACb,CAAC,CAAC;EACL;EAEA,SAASE,eAAeA,CAACC,GAAG,EAAEC,GAAG,EAAE;IACjC,IAAIC,YAAY;IAChB,GAAG;MACDA,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;IAClE,CAAC,QACME,YAAY,KAAG,CAAC;IAEvB,OAAOA,YAAY;EACrB;EAGA,SAAUI,iBAAiBA,CAAA,EAAG;IAC5B,OAAOH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EAC1C;EAEA,MAAME,cAAc,GAAGD,iBAAiB,CAAC,CAAC;EAE1C,MAAME,UAAU,GAAGA,CAACC,UAAU,EAAEC,UAAU,KAAK;IAC7CZ,WAAW,CAAC,CAAC;;IAGf;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA,IAAIN,SAAS,GAAGO,eAAe,CAACW,UAAU,CAACV,GAAG,EAAEU,UAAU,CAACT,GAAG,CAAC;IAC/D,IAAIR,WAAW,GAAGM,eAAe,CAACW,UAAU,CAACV,GAAG,EAAEU,UAAU,CAACT,GAAG,CAAC;;IAEjE;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;;IAEAV,aAAa,CAAC;MACVC,SAAS,EAAEA,SAAS;MACpBC,WAAW,EAAEA;IACjB,CAAC,CAAC;IAEFkB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEtB,UAAU,CAAC;EAErD,CAAC;;EAEH;;EAEA,OAAO;IACLmB,UAAU;IACTnB,UAAU;IACVC,aAAa;IACbgB,cAAc;IACdb,MAAM;IACNC,SAAS;IACTG,WAAW;IACXC,eAAe;IACfS;EAGH,CAAC;AACH;AAACnB,EAAA,CAxGQD,SAAS;AA0GlB,eAAeA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}