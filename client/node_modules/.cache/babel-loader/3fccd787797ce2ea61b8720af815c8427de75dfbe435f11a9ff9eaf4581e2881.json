{"ast":null,"code":"var _jsxFileName = \"E:\\\\Personal\\\\PERN\\\\simple-math\\\\client\\\\src\\\\component\\\\arithmetic\\\\MathArrayInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MathInput = ({\n  index,\n  randomSheetArray,\n  setRandomSheetArray,\n  type,\n  difficulty,\n  operation,\n  sameDenoms\n}) => {\n  _s();\n  const [expression, setExpression] = useState('');\n  useEffect(() => {\n    console.log(\"randomSheetArray in MathInput\", randomSheetArray);\n    setExpression('');\n  }, [difficulty, operation, sameDenoms]);\n  const handleChange = event => {\n    const inputValue = event.target.value;\n    setExpression(inputValue);\n    const newArray = [...randomSheetArray];\n    const objectToUpdate = newArray[index];\n\n    // Validate input\n\n    // Evaluate the expression and update the specified field of the object\n    try {\n      const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\n      if (type === 'inputNum') {\n        objectToUpdate.inputNum = isNaN(evalResult) ? null : evalResult;\n      } else if (type === 'inputDenom') {\n        objectToUpdate.inputDenom = isNaN(evalResult) ? null : evalResult;\n      }\n    } catch (error) {\n      if (type === 'inputNum') {\n        objectToUpdate.inputNum = null;\n      } else if (type === 'inputDenom') {\n        objectToUpdate.inputDenom = null;\n      }\n    }\n\n    // Update the array with the modified object\n    newArray[index] = objectToUpdate;\n    setRandomSheetArray(newArray);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input-digit input\",\n      type: \"text\",\n      value: expression,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(MathInput, \"UBbhfUHpckB9bDIafYQDH0pEH2s=\");\n_c = MathInput;\nexport default MathInput;\nvar _c;\n$RefreshReg$(_c, \"MathInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MathInput","index","randomSheetArray","setRandomSheetArray","type","difficulty","operation","sameDenoms","_s","expression","setExpression","console","log","handleChange","event","inputValue","target","value","newArray","objectToUpdate","evalResult","eval","inputNum","isNaN","inputDenom","error","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Personal/PERN/simple-math/client/src/component/arithmetic/MathArrayInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst MathInput = ({ index, randomSheetArray, setRandomSheetArray, type, difficulty, operation, sameDenoms }) => {\r\n  const [expression, setExpression] = useState('');\r\n\r\n  useEffect(() => {\r\n    console.log(\"randomSheetArray in MathInput\", randomSheetArray);\r\n    setExpression('');\r\n  }, [difficulty, operation, sameDenoms]);\r\n\r\n  const handleChange = (event) => {\r\n    const inputValue = event.target.value;\r\n    setExpression(inputValue);\r\n    \r\n    const newArray = [...randomSheetArray];\r\n    const objectToUpdate = newArray[index];\r\n\r\n    // Validate input\r\n  \r\n\r\n    // Evaluate the expression and update the specified field of the object\r\n    try {\r\n      const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\r\n      if (type === 'inputNum') {\r\n        objectToUpdate.inputNum = isNaN(evalResult) ? null : evalResult;\r\n      } else if (type === 'inputDenom') {\r\n        objectToUpdate.inputDenom = isNaN(evalResult) ? null : evalResult;\r\n      }\r\n    } catch (error) {\r\n      if (type === 'inputNum') {\r\n        objectToUpdate.inputNum = null;\r\n      } else if (type === 'inputDenom') {\r\n        objectToUpdate.inputDenom = null;\r\n      }\r\n    }\r\n\r\n    // Update the array with the modified object\r\n    newArray[index] = objectToUpdate;\r\n    setRandomSheetArray(newArray);\r\n  };\r\n\r\n  return (\r\n    <div className=''>\r\n      <input\r\n        className='input-digit input'\r\n        type=\"text\"\r\n        value={expression}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MathInput;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnD,MAAMC,SAAS,GAAGA,CAAC;EAAEC,KAAK;EAAEC,gBAAgB;EAAEC,mBAAmB;EAAEC,IAAI;EAAEC,UAAU;EAAEC,SAAS;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC/G,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEV,gBAAgB,CAAC;IAC9DQ,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC,EAAE,CAACL,UAAU,EAAEC,SAAS,EAAEC,UAAU,CAAC,CAAC;EAEvC,MAAMM,YAAY,GAAIC,KAAK,IAAK;IAC9B,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IACrCP,aAAa,CAACK,UAAU,CAAC;IAEzB,MAAMG,QAAQ,GAAG,CAAC,GAAGhB,gBAAgB,CAAC;IACtC,MAAMiB,cAAc,GAAGD,QAAQ,CAACjB,KAAK,CAAC;;IAEtC;;IAGA;IACA,IAAI;MACF,MAAMmB,UAAU,GAAGC,IAAI,CAACN,UAAU,CAAC,CAAC,CAAC;MACrC,IAAIX,IAAI,KAAK,UAAU,EAAE;QACvBe,cAAc,CAACG,QAAQ,GAAGC,KAAK,CAACH,UAAU,CAAC,GAAG,IAAI,GAAGA,UAAU;MACjE,CAAC,MAAM,IAAIhB,IAAI,KAAK,YAAY,EAAE;QAChCe,cAAc,CAACK,UAAU,GAAGD,KAAK,CAACH,UAAU,CAAC,GAAG,IAAI,GAAGA,UAAU;MACnE;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd,IAAIrB,IAAI,KAAK,UAAU,EAAE;QACvBe,cAAc,CAACG,QAAQ,GAAG,IAAI;MAChC,CAAC,MAAM,IAAIlB,IAAI,KAAK,YAAY,EAAE;QAChCe,cAAc,CAACK,UAAU,GAAG,IAAI;MAClC;IACF;;IAEA;IACAN,QAAQ,CAACjB,KAAK,CAAC,GAAGkB,cAAc;IAChChB,mBAAmB,CAACe,QAAQ,CAAC;EAC/B,CAAC;EAED,oBACEnB,OAAA;IAAK2B,SAAS,EAAC,EAAE;IAAAC,QAAA,eACf5B,OAAA;MACE2B,SAAS,EAAC,mBAAmB;MAC7BtB,IAAI,EAAC,MAAM;MACXa,KAAK,EAAER,UAAW;MAClBmB,QAAQ,EAAEf;IAAa;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACxB,EAAA,CAjDIR,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AAmDf,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}