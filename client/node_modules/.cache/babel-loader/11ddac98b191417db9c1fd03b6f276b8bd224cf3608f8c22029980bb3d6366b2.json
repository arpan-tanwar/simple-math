{"ast":null,"code":"var _jsxFileName = \"D:\\\\Freelancing\\\\simple-math\\\\client\\\\src\\\\component\\\\arithmetic\\\\arithmetic\\\\MathInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MathInput = ({\n  setInputs,\n  inputs,\n  type,\n  difficulty,\n  operation,\n  sameDenoms,\n  mathInputNull\n}) => {\n  _s();\n  const [expression, setExpression] = useState('');\n  useEffect(() => {\n    console.log(\"inputs in mathInput\", inputs);\n    if (mathInputNull) {\n      setExpression('');\n    }\n  }, [difficulty, operation, sameDenoms, inputs]);\n  const handleChange = event => {\n    const inputValue = event.target.value;\n    setExpression(inputValue);\n    // Evaluate the expression and update the result\n    if (type === 'inputNum') {\n      try {\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\n\n        // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\n        setInputs({\n          ...inputs,\n          inputNum: isNaN(evalResult) ? null : evalResult\n        });\n      } catch (error) {\n        setInputs({\n          ...inputs,\n          inputNum: null\n        });\n      }\n    }\n    if (type === 'inputDenom') {\n      try {\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\n\n        // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\n        setInputs({\n          ...inputs,\n          inputDenom: isNaN(evalResult) ? null : evalResult\n        });\n      } catch (error) {\n        setInputs({\n          ...inputs,\n          inputDenom: null\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input-digit   input\",\n      type: \"text\",\n      value: expression,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(MathInput, \"UBbhfUHpckB9bDIafYQDH0pEH2s=\");\n_c = MathInput;\nexport default MathInput;\nvar _c;\n$RefreshReg$(_c, \"MathInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MathInput","setInputs","inputs","type","difficulty","operation","sameDenoms","mathInputNull","_s","expression","setExpression","console","log","handleChange","event","inputValue","target","value","evalResult","eval","inputNum","isNaN","error","inputDenom","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Freelancing/simple-math/client/src/component/arithmetic/arithmetic/MathInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst MathInput = ({setInputs, inputs, type, difficulty, operation, sameDenoms, mathInputNull}) => {\r\n  const [expression, setExpression] = useState('');\r\n \r\n  \r\n  useEffect(() => {\r\n    console.log(\"inputs in mathInput\", inputs)\r\n\r\n    if(mathInputNull){\r\n      setExpression('')\r\n    }\r\n    \r\n    \r\n }, [difficulty, operation, sameDenoms, inputs])\r\n\r\n  const handleChange = (event) => {\r\n    const inputValue = event.target.value;\r\n    setExpression(inputValue);\r\n    // Evaluate the expression and update the result\r\n    if(type==='inputNum'){\r\n      try {\r\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\r\n       \r\n       // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\r\n        setInputs({...inputs, inputNum: isNaN(evalResult) ? null : evalResult })\r\n      } catch (error) {\r\n        setInputs({...inputs, inputNum:  null  })\r\n      }\r\n    }\r\n\r\n    if(type==='inputDenom'){\r\n      try {\r\n        const evalResult = eval(inputValue); // Use of eval can be dangerous, make sure to validate the input\r\n       \r\n       // setResult(isNaN(evalResult) ? null : evalResult); // Check if the result is a valid number\r\n        setInputs({...inputs, inputDenom: isNaN(evalResult) ? null : evalResult })\r\n      } catch (error) {\r\n        setInputs({...inputs, inputDenom:  null  })\r\n      }\r\n    }\r\n  \r\n\r\n  };\r\n\r\n  return (\r\n    <div className=''>\r\n      <input\r\n        className='input-digit   input'\r\n        type=\"text\"\r\n        value={expression}\r\n        onChange={handleChange}\r\n      />\r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MathInput;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,SAAS,GAAGA,CAAC;EAACC,SAAS;EAAEC,MAAM;EAAEC,IAAI;EAAEC,UAAU;EAAEC,SAAS;EAAEC,UAAU;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACjG,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAGhDC,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEV,MAAM,CAAC;IAE1C,IAAGK,aAAa,EAAC;MACfG,aAAa,CAAC,EAAE,CAAC;IACnB;EAGH,CAAC,EAAE,CAACN,UAAU,EAAEC,SAAS,EAAEC,UAAU,EAAEJ,MAAM,CAAC,CAAC;EAE9C,MAAMW,YAAY,GAAIC,KAAK,IAAK;IAC9B,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IACrCP,aAAa,CAACK,UAAU,CAAC;IACzB;IACA,IAAGZ,IAAI,KAAG,UAAU,EAAC;MACnB,IAAI;QACF,MAAMe,UAAU,GAAGC,IAAI,CAACJ,UAAU,CAAC,CAAC,CAAC;;QAEtC;QACCd,SAAS,CAAC;UAAC,GAAGC,MAAM;UAAEkB,QAAQ,EAAEC,KAAK,CAACH,UAAU,CAAC,GAAG,IAAI,GAAGA;QAAW,CAAC,CAAC;MAC1E,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdrB,SAAS,CAAC;UAAC,GAAGC,MAAM;UAAEkB,QAAQ,EAAG;QAAM,CAAC,CAAC;MAC3C;IACF;IAEA,IAAGjB,IAAI,KAAG,YAAY,EAAC;MACrB,IAAI;QACF,MAAMe,UAAU,GAAGC,IAAI,CAACJ,UAAU,CAAC,CAAC,CAAC;;QAEtC;QACCd,SAAS,CAAC;UAAC,GAAGC,MAAM;UAAEqB,UAAU,EAAEF,KAAK,CAACH,UAAU,CAAC,GAAG,IAAI,GAAGA;QAAW,CAAC,CAAC;MAC5E,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdrB,SAAS,CAAC;UAAC,GAAGC,MAAM;UAAEqB,UAAU,EAAG;QAAM,CAAC,CAAC;MAC7C;IACF;EAGF,CAAC;EAED,oBACExB,OAAA;IAAKyB,SAAS,EAAC,EAAE;IAAAC,QAAA,eACf1B,OAAA;MACEyB,SAAS,EAAC,qBAAqB;MAC/BrB,IAAI,EAAC,MAAM;MACXc,KAAK,EAAER,UAAW;MAClBiB,QAAQ,EAAEb;IAAa;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAEV,CAAC;AAACtB,EAAA,CAtDIR,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AAwDf,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}