{"ast":null,"code":"import React,{useState,useEffect}from'react';import Fraction1 from'./Fraction1';import Fraction2 from'./Fraction2';import Fraction3 from'./Fraction3';import Fraction4 from'./Fraction4';import CheckModal from'../arithmetic/CheckModal';import SolutionFracModal from'./SolutionFracModal';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Fraction=_ref=>{let{efraction,difficulty2,btnFracNextRef}=_ref;const[randomFrac,setRandomFrac]=useState({numerator:1,denominator:1});const[inputs,setInputs]=useState({inputNum:null,inputDenom:null});const[inputs4,setInputs4]=useState({numerator:null,denominator:null});const[inputRange,setInputRange]=useState({min:1,max:9});const[result,setResult]=useState(false);const[showSolutionModal,setShowSolutionModal]=useState(false);const[showCheckModal,setShowCheckModal]=useState(false);const[multiplyNumber,setMultiplyNumber]=useState(1);const[mathInputNull,setMathInputNull]=useState(false);function clearInputs(){setInputs({inputNum:null,inputDenom:null});setInputs4({inputNum:null,inputDenom:null});}function findPrimeFactors(num){let factors=[];let divisor=2;while(num>1){if(num%divisor===0){factors.push(divisor);num/=divisor;}else{divisor++;}}return factors;}const numFactors=findPrimeFactors(randomFrac.numerator);const denomFactors=findPrimeFactors(randomFrac.denominator);useEffect(()=>{setMultiplyNumber(getMultiplyNumber());handleNext(difficulty2);clearInputs();},[difficulty2,efraction]);function getRandomNumber(min,max){let randomNumber;do{randomNumber=Math.floor(Math.random()*(max-min+1))+min;}while(randomNumber===0);return randomNumber;}function getMultiplyNumber(){return Math.floor(Math.random()*3)+2;}function simplifyFraction(numerator,denominator){if(numerator==\"\"||denominator==\"\"){return;}// Function to find greatest common divisor (GCD) using Euclid's algorithm\nconst gcd=(a,b)=>{if(b===0){return a;}return gcd(b,a%b);};// Find the GCD of numerator and denominator\nconst gcdValue=gcd(numerator,denominator);// Divide both numerator and denominator by their GCD to get the smallest equivalent fraction\nconst smallestNumerator=numerator/gcdValue;const smallestDenominator=denominator/gcdValue;return[smallestNumerator,smallestDenominator];}const handleNext=difficulty2=>{setMultiplyNumber(getMultiplyNumber());clearInputs();setMathInputNull(true);switch(difficulty2){case 1:setInputRange({min:1,max:9});break;case 2:setInputRange({min:1,max:30});break;case 3:setInputRange({min:-9,max:9});break;case 4:setInputRange({min:-9,max:9});break;default:setInputRange({min:1,max:9});break;}var numerator=getRandomNumber(inputRange.min,inputRange.max);var denominator=getRandomNumber(inputRange.min,inputRange.max);if(difficulty2===3&&numerator<0&&denominator<0){console.log(\"both are negative\");denominator=Math.abs(denominator);}setRandomFrac({numerator:numerator,denominator:denominator});};const handleCheck=()=>{let checkResult=1;let inputResult=2;const num=Number(inputs.inputNum);const denom=Number(inputs.inputDenom);if(efraction===1){if(inputs.inputNum==multiplyNumber&&inputs.inputDenom==multiplyNumber){checkResult=1;inputResult=1;}}if(efraction===2){const[fracNum,fracDenom]=simplifyFraction(randomFrac.numerator,randomFrac.denominator);const[inputNum,inputDenom]=simplifyFraction(inputs.inputNum||2.5,inputs.inputDenom||1.3);if(fracNum==inputNum&&fracDenom==inputDenom){checkResult=1;inputResult=1;}}if(efraction===3){if(inputs.inputNum==randomFrac.numerator*multiplyNumber){checkResult=1;inputResult=1;}}if(efraction===4){if(randomFrac.numerator>=inputs4.inputNum&&randomFrac.denominator>=inputs4.inputDenom){if(inputs4.inputNum!==null&&inputs4.inputDenom!==null&&inputs.inputNum!==null&&inputs.inputDenom!==null){const[fracNum,fracDenom]=simplifyFraction(randomFrac.numerator,randomFrac.denominator);const[inputs4Num,inputs4Denom]=simplifyFraction(inputs4.inputNum,inputs4.inputDenom);const[inputsNum,inputsDenom]=simplifyFraction(inputs.inputNum,inputs.inputDenom);if(fracNum==inputs4Num&&inputs4Num==inputsNum&&fracDenom==inputs4Denom&&inputs4Denom==inputsDenom&&fracNum==inputs.inputNum&&fracDenom==inputs.inputDenom){checkResult=1;inputResult=1;}}}}if(checkResult==inputResult){setResult(true);}else{setResult(false);}setShowCheckModal(true);};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"math  flex justify-start  mt-2\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[efraction===1&&/*#__PURE__*/_jsx(Fraction1,{randomFrac:randomFrac,multiplyNumber:multiplyNumber,inputs:inputs,setInputs:setInputs}),efraction===2&&/*#__PURE__*/_jsx(Fraction2,{randomFrac:randomFrac,inputs:inputs,setInputs:setInputs}),efraction===3&&/*#__PURE__*/_jsx(Fraction3,{randomFrac:randomFrac,multiplyNumber:multiplyNumber,inputs:inputs,setInputs:setInputs}),efraction===4&&/*#__PURE__*/_jsx(Fraction4,{randomFrac:randomFrac,multiplyNumber:multiplyNumber,inputs:inputs,setInputs:setInputs,inputs4:inputs4,setInputs4:setInputs4,mathInputNull:mathInputNull,setMathInputNull:setMathInputNull})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"buttons w-full  flex flex-row justify-start mt-14\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleCheck(),className:\"btn-drill\",children:\"Check\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleNext(difficulty2),ref:btnFracNextRef,className:\"btn-drill ml-1 md:ml-3\",children:\"Next\"})]})]})}),/*#__PURE__*/_jsx(CheckModal,{showCheckModal:showCheckModal,setShowSolutionModal:setShowSolutionModal,setShowCheckModal:setShowCheckModal,result:result}),/*#__PURE__*/_jsx(SolutionFracModal,{efraction:efraction,showSolutionModal:showSolutionModal,setShowSolutionModal:setShowSolutionModal,setShowCheckModal:setShowCheckModal,randomFrac:randomFrac,inputs:inputs,multiplyNumber:multiplyNumber,numFactors:numFactors,denomFactors:denomFactors})]});};export default Fraction;","map":{"version":3,"names":["React","useState","useEffect","Fraction1","Fraction2","Fraction3","Fraction4","CheckModal","SolutionFracModal","jsx","_jsx","jsxs","_jsxs","Fraction","_ref","efraction","difficulty2","btnFracNextRef","randomFrac","setRandomFrac","numerator","denominator","inputs","setInputs","inputNum","inputDenom","inputs4","setInputs4","inputRange","setInputRange","min","max","result","setResult","showSolutionModal","setShowSolutionModal","showCheckModal","setShowCheckModal","multiplyNumber","setMultiplyNumber","mathInputNull","setMathInputNull","clearInputs","findPrimeFactors","num","factors","divisor","push","numFactors","denomFactors","getMultiplyNumber","handleNext","getRandomNumber","randomNumber","Math","floor","random","simplifyFraction","gcd","a","b","gcdValue","smallestNumerator","smallestDenominator","console","log","abs","handleCheck","checkResult","inputResult","Number","denom","fracNum","fracDenom","inputs4Num","inputs4Denom","inputsNum","inputsDenom","className","children","onClick","ref"],"sources":["D:/Freelancing/simple-math/client/src/component/arithmetic/efractions/Fraction.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Fraction1 from './Fraction1'\r\nimport Fraction2 from './Fraction2'\r\nimport Fraction3 from './Fraction3'\r\nimport Fraction4 from './Fraction4'\r\nimport CheckModal from '../arithmetic/CheckModal'\r\nimport SolutionFracModal from './SolutionFracModal'\r\n\r\n\r\n\r\n\r\n\r\nconst Fraction = ({efraction, difficulty2, btnFracNextRef}) => {\r\n\r\n  \r\n\r\n  \r\n \r\n  const [randomFrac, setRandomFrac] = useState({\r\n    numerator : 1,\r\n    denominator : 1\r\n  })\r\n\r\n  const [inputs, setInputs] = useState({\r\n    inputNum: null,\r\n    inputDenom: null\r\n  })\r\n\r\n  const [inputs4, setInputs4] = useState({\r\n    numerator: null,\r\n    denominator: null\r\n   })\r\n\r\n  const [inputRange, setInputRange] = useState({\r\n    min: 1,\r\n    max: 9\r\n  })\r\n\r\n  const [result, setResult] = useState(false)\r\n  const [showSolutionModal, setShowSolutionModal] = useState(false)\r\n  const [showCheckModal, setShowCheckModal] =  useState(false)\r\n  const [multiplyNumber, setMultiplyNumber] = useState(1)\r\n  const [mathInputNull, setMathInputNull] = useState(false)\r\n\r\n\r\n  function clearInputs() {\r\n    setInputs({\r\n      inputNum: null,\r\n      inputDenom: null\r\n     })\r\n    \r\n     setInputs4({\r\n      inputNum: null,\r\n      inputDenom: null\r\n     })\r\n  }\r\n\r\n  function findPrimeFactors(num){\r\n    let factors = [];\r\n    let divisor = 2;\r\n\r\n    while (num > 1) {\r\n        if (num % divisor === 0) {\r\n            factors.push(divisor);\r\n            num /= divisor;\r\n        } else {\r\n            divisor++;\r\n        }\r\n    }\r\n\r\n    return factors;\r\n}\r\n\r\n   const numFactors = findPrimeFactors(randomFrac.numerator)\r\n   const denomFactors = findPrimeFactors(randomFrac.denominator)\r\n\r\n\r\n  useEffect(() => {\r\n   setMultiplyNumber(getMultiplyNumber())\r\n   \r\n    handleNext(difficulty2)\r\n    clearInputs()\r\n   \r\n  }, [difficulty2, efraction]);\r\n\r\n  function getRandomNumber(min, max) {\r\n    let randomNumber;\r\n    do {\r\n      randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    } \r\n    while (randomNumber===0)\r\n    \r\n    return randomNumber;\r\n  }\r\n\r\n  \r\n  function  getMultiplyNumber() {\r\n    return Math.floor(Math.random() * 3) + 2;\r\n  }\r\n  \r\n \r\n  function simplifyFraction(numerator, denominator) {\r\n\r\n       if(numerator==\"\" || denominator==\"\"){\r\n        return;\r\n       }\r\n        // Function to find greatest common divisor (GCD) using Euclid's algorithm\r\n        const gcd = (a, b) => {\r\n            if (b === 0) {\r\n                return a;\r\n            }\r\n            return gcd(b, a % b);\r\n        };\r\n    \r\n        // Find the GCD of numerator and denominator\r\n        const gcdValue = gcd(numerator, denominator);\r\n    \r\n        // Divide both numerator and denominator by their GCD to get the smallest equivalent fraction\r\n        const smallestNumerator = numerator / gcdValue;\r\n        const smallestDenominator = denominator / gcdValue;\r\n    \r\n        return [smallestNumerator, smallestDenominator];\r\n    }\r\n\r\n\r\n\r\n  const handleNext = (difficulty2) => {\r\n    setMultiplyNumber(getMultiplyNumber())\r\n  clearInputs()\r\n  setMathInputNull(true)\r\n  switch (difficulty2) {\r\n    case 1: \r\n        setInputRange({min:1, max:9});\r\n      break;\r\n\r\n    case 2:    \r\n    setInputRange({min:1, max:30});\r\n      break;\r\n\r\n    case 3:\r\n      setInputRange({min:-9, max:9});\r\n    break;\r\n\r\n    case 4:\r\n      setInputRange({min:-9, max:9});\r\n  break;\r\n\r\n    default:\r\n      setInputRange({min:1, max:9});\r\n      break;\r\n  }\r\n\r\n  var numerator = getRandomNumber(inputRange.min, inputRange.max);\r\n  var denominator = getRandomNumber(inputRange.min, inputRange.max);\r\n \r\n\r\n  if(difficulty2===3 && numerator<0 && denominator<0){\r\n    console.log(\"both are negative\")\r\n    denominator = Math.abs(denominator)\r\n  }\r\n\r\n  setRandomFrac({\r\n      numerator: numerator,\r\n      denominator: denominator\r\n  });\r\n\r\n  \r\n\r\n  \r\n}\r\n\r\nconst handleCheck = () => {\r\n  \r\n  let checkResult=1;\r\n  let inputResult=2;\r\n\r\n  const num = Number(inputs.inputNum);\r\n  const denom = Number(inputs.inputDenom)\r\n\r\n  if(efraction===1){\r\n    if(inputs.inputNum==multiplyNumber && inputs.inputDenom==multiplyNumber){\r\n      checkResult=1;\r\n      inputResult=1;\r\n    }\r\n  }\r\n\r\n  if(efraction===2){\r\n    const [fracNum, fracDenom] = simplifyFraction(randomFrac.numerator, randomFrac.denominator)\r\n    const  [inputNum, inputDenom] = simplifyFraction(inputs.inputNum || 2.5, inputs.inputDenom || 1.3)\r\n    if(fracNum==inputNum && fracDenom==inputDenom){\r\n      checkResult=1;\r\n      inputResult=1;\r\n    }\r\n  }\r\n\r\n  if(efraction===3){\r\n    if(inputs.inputNum == randomFrac.numerator*multiplyNumber ){\r\n      checkResult=1;\r\n      inputResult=1;\r\n    }\r\n  }\r\n\r\n  if(efraction===4){\r\n    if(randomFrac.numerator>=inputs4.inputNum &&  randomFrac.denominator>=inputs4.inputDenom){\r\n      if(inputs4.inputNum!==null && inputs4.inputDenom!==null && inputs.inputNum!==null && inputs.inputDenom!==null){\r\n        const [fracNum, fracDenom] = simplifyFraction(randomFrac.numerator, randomFrac.denominator)\r\n        const [inputs4Num, inputs4Denom] = simplifyFraction(inputs4.inputNum, inputs4.inputDenom)\r\n        const [inputsNum, inputsDenom] = simplifyFraction(inputs.inputNum, inputs.inputDenom)\r\n  \r\n        if(fracNum == inputs4Num && inputs4Num == inputsNum && fracDenom == inputs4Denom && inputs4Denom == inputsDenom && fracNum==inputs.inputNum && fracDenom==inputs.inputDenom) {\r\n          checkResult=1;\r\n          inputResult=1;\r\n        }\r\n   \r\n      }\r\n     \r\n    }\r\n   \r\n  }\r\n\r\n  \r\n  if(checkResult==inputResult){\r\n    setResult(true)\r\n  }\r\n  else{\r\n    setResult(false)\r\n  }\r\n  setShowCheckModal(true)\r\n}\r\n\r\n\r\n \r\n  \r\n\r\n\r\n  \r\n\r\n  return (\r\n    <div className='flex flex-col'>\r\n        <div className='math  flex justify-start  mt-2'>\r\n              <div>\r\n                  <div>\r\n                    {efraction===1 && <Fraction1 randomFrac={randomFrac} multiplyNumber={multiplyNumber} inputs={inputs} setInputs={setInputs} />}    \r\n                    {efraction===2 && <Fraction2 randomFrac={randomFrac} inputs={inputs} setInputs={setInputs} />}   \r\n                    {efraction===3 && <Fraction3 randomFrac={randomFrac} multiplyNumber={multiplyNumber} inputs={inputs} setInputs={setInputs}/>} \r\n\r\n                    {efraction===4 && <Fraction4 randomFrac={randomFrac} multiplyNumber={multiplyNumber} inputs={inputs} setInputs={setInputs} inputs4={inputs4} setInputs4={setInputs4} mathInputNull={mathInputNull} setMathInputNull={setMathInputNull} />}         \r\n                       \r\n                  </div>\r\n\r\n                  <div className='buttons w-full  flex flex-row justify-start mt-14'>\r\n                    <button onClick={()=>handleCheck()}  className='btn-drill'>Check</button>\r\n\r\n                    <button onClick={()=>handleNext(difficulty2)} ref={btnFracNextRef}  className='btn-drill ml-1 md:ml-3'>Next</button>\r\n                  </div>\r\n              </div>   \r\n        </div>   \r\n\r\n        <CheckModal showCheckModal={showCheckModal}  setShowSolutionModal={setShowSolutionModal} setShowCheckModal={setShowCheckModal} result={result} />   \r\n\r\n        <SolutionFracModal efraction={efraction} showSolutionModal={showSolutionModal} setShowSolutionModal={setShowSolutionModal}  setShowCheckModal={setShowCheckModal} randomFrac={randomFrac} inputs={inputs} multiplyNumber={multiplyNumber} numFactors={numFactors} denomFactors={denomFactors}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Fraction\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,QAAQ,CAAEC,SAAS,KAAO,OAAO,CAChD,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,UAAU,KAAM,0BAA0B,CACjD,MAAO,CAAAC,iBAAiB,KAAM,qBAAqB,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAMnD,KAAM,CAAAC,QAAQ,CAAGC,IAAA,EAA8C,IAA7C,CAACC,SAAS,CAAEC,WAAW,CAAEC,cAAc,CAAC,CAAAH,IAAA,CAMxD,KAAM,CAACI,UAAU,CAAEC,aAAa,CAAC,CAAGlB,QAAQ,CAAC,CAC3CmB,SAAS,CAAG,CAAC,CACbC,WAAW,CAAG,CAChB,CAAC,CAAC,CAEF,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGtB,QAAQ,CAAC,CACnCuB,QAAQ,CAAE,IAAI,CACdC,UAAU,CAAE,IACd,CAAC,CAAC,CAEF,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAG1B,QAAQ,CAAC,CACrCmB,SAAS,CAAE,IAAI,CACfC,WAAW,CAAE,IACd,CAAC,CAAC,CAEH,KAAM,CAACO,UAAU,CAAEC,aAAa,CAAC,CAAG5B,QAAQ,CAAC,CAC3C6B,GAAG,CAAE,CAAC,CACNC,GAAG,CAAE,CACP,CAAC,CAAC,CAEF,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGhC,QAAQ,CAAC,KAAK,CAAC,CAC3C,KAAM,CAACiC,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGlC,QAAQ,CAAC,KAAK,CAAC,CACjE,KAAM,CAACmC,cAAc,CAAEC,iBAAiB,CAAC,CAAIpC,QAAQ,CAAC,KAAK,CAAC,CAC5D,KAAM,CAACqC,cAAc,CAAEC,iBAAiB,CAAC,CAAGtC,QAAQ,CAAC,CAAC,CAAC,CACvD,KAAM,CAACuC,aAAa,CAAEC,gBAAgB,CAAC,CAAGxC,QAAQ,CAAC,KAAK,CAAC,CAGzD,QAAS,CAAAyC,WAAWA,CAAA,CAAG,CACrBnB,SAAS,CAAC,CACRC,QAAQ,CAAE,IAAI,CACdC,UAAU,CAAE,IACb,CAAC,CAAC,CAEFE,UAAU,CAAC,CACVH,QAAQ,CAAE,IAAI,CACdC,UAAU,CAAE,IACb,CAAC,CAAC,CACL,CAEA,QAAS,CAAAkB,gBAAgBA,CAACC,GAAG,CAAC,CAC5B,GAAI,CAAAC,OAAO,CAAG,EAAE,CAChB,GAAI,CAAAC,OAAO,CAAG,CAAC,CAEf,MAAOF,GAAG,CAAG,CAAC,CAAE,CACZ,GAAIA,GAAG,CAAGE,OAAO,GAAK,CAAC,CAAE,CACrBD,OAAO,CAACE,IAAI,CAACD,OAAO,CAAC,CACrBF,GAAG,EAAIE,OAAO,CAClB,CAAC,IAAM,CACHA,OAAO,EAAE,CACb,CACJ,CAEA,MAAO,CAAAD,OAAO,CAClB,CAEG,KAAM,CAAAG,UAAU,CAAGL,gBAAgB,CAACzB,UAAU,CAACE,SAAS,CAAC,CACzD,KAAM,CAAA6B,YAAY,CAAGN,gBAAgB,CAACzB,UAAU,CAACG,WAAW,CAAC,CAG9DnB,SAAS,CAAC,IAAM,CACfqC,iBAAiB,CAACW,iBAAiB,CAAC,CAAC,CAAC,CAErCC,UAAU,CAACnC,WAAW,CAAC,CACvB0B,WAAW,CAAC,CAAC,CAEf,CAAC,CAAE,CAAC1B,WAAW,CAAED,SAAS,CAAC,CAAC,CAE5B,QAAS,CAAAqC,eAAeA,CAACtB,GAAG,CAAEC,GAAG,CAAE,CACjC,GAAI,CAAAsB,YAAY,CAChB,EAAG,CACDA,YAAY,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,EAAIzB,GAAG,CAAGD,GAAG,CAAG,CAAC,CAAC,CAAC,CAAGA,GAAG,CAClE,CAAC,MACMuB,YAAY,GAAG,CAAC,EAEvB,MAAO,CAAAA,YAAY,CACrB,CAGA,QAAU,CAAAH,iBAAiBA,CAAA,CAAG,CAC5B,MAAO,CAAAI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAAG,CAAC,CAC1C,CAGA,QAAS,CAAAC,gBAAgBA,CAACrC,SAAS,CAAEC,WAAW,CAAE,CAE7C,GAAGD,SAAS,EAAE,EAAE,EAAIC,WAAW,EAAE,EAAE,CAAC,CACnC,OACD,CACC;AACA,KAAM,CAAAqC,GAAG,CAAGA,CAACC,CAAC,CAAEC,CAAC,GAAK,CAClB,GAAIA,CAAC,GAAK,CAAC,CAAE,CACT,MAAO,CAAAD,CAAC,CACZ,CACA,MAAO,CAAAD,GAAG,CAACE,CAAC,CAAED,CAAC,CAAGC,CAAC,CAAC,CACxB,CAAC,CAED;AACA,KAAM,CAAAC,QAAQ,CAAGH,GAAG,CAACtC,SAAS,CAAEC,WAAW,CAAC,CAE5C;AACA,KAAM,CAAAyC,iBAAiB,CAAG1C,SAAS,CAAGyC,QAAQ,CAC9C,KAAM,CAAAE,mBAAmB,CAAG1C,WAAW,CAAGwC,QAAQ,CAElD,MAAO,CAACC,iBAAiB,CAAEC,mBAAmB,CAAC,CACnD,CAIF,KAAM,CAAAZ,UAAU,CAAInC,WAAW,EAAK,CAClCuB,iBAAiB,CAACW,iBAAiB,CAAC,CAAC,CAAC,CACxCR,WAAW,CAAC,CAAC,CACbD,gBAAgB,CAAC,IAAI,CAAC,CACtB,OAAQzB,WAAW,EACjB,IAAK,EAAC,CACFa,aAAa,CAAC,CAACC,GAAG,CAAC,CAAC,CAAEC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC/B,MAEF,IAAK,EAAC,CACNF,aAAa,CAAC,CAACC,GAAG,CAAC,CAAC,CAAEC,GAAG,CAAC,EAAE,CAAC,CAAC,CAC5B,MAEF,IAAK,EAAC,CACJF,aAAa,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC,CAAEC,GAAG,CAAC,CAAC,CAAC,CAAC,CAChC,MAEA,IAAK,EAAC,CACJF,aAAa,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC,CAAEC,GAAG,CAAC,CAAC,CAAC,CAAC,CAClC,MAEE,QACEF,aAAa,CAAC,CAACC,GAAG,CAAC,CAAC,CAAEC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC7B,MACJ,CAEA,GAAI,CAAAX,SAAS,CAAGgC,eAAe,CAACxB,UAAU,CAACE,GAAG,CAAEF,UAAU,CAACG,GAAG,CAAC,CAC/D,GAAI,CAAAV,WAAW,CAAG+B,eAAe,CAACxB,UAAU,CAACE,GAAG,CAAEF,UAAU,CAACG,GAAG,CAAC,CAGjE,GAAGf,WAAW,GAAG,CAAC,EAAII,SAAS,CAAC,CAAC,EAAIC,WAAW,CAAC,CAAC,CAAC,CACjD2C,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAChC5C,WAAW,CAAGiC,IAAI,CAACY,GAAG,CAAC7C,WAAW,CAAC,CACrC,CAEAF,aAAa,CAAC,CACVC,SAAS,CAAEA,SAAS,CACpBC,WAAW,CAAEA,WACjB,CAAC,CAAC,CAKJ,CAAC,CAED,KAAM,CAAA8C,WAAW,CAAGA,CAAA,GAAM,CAExB,GAAI,CAAAC,WAAW,CAAC,CAAC,CACjB,GAAI,CAAAC,WAAW,CAAC,CAAC,CAEjB,KAAM,CAAAzB,GAAG,CAAG0B,MAAM,CAAChD,MAAM,CAACE,QAAQ,CAAC,CACnC,KAAM,CAAA+C,KAAK,CAAGD,MAAM,CAAChD,MAAM,CAACG,UAAU,CAAC,CAEvC,GAAGV,SAAS,GAAG,CAAC,CAAC,CACf,GAAGO,MAAM,CAACE,QAAQ,EAAEc,cAAc,EAAIhB,MAAM,CAACG,UAAU,EAAEa,cAAc,CAAC,CACtE8B,WAAW,CAAC,CAAC,CACbC,WAAW,CAAC,CAAC,CACf,CACF,CAEA,GAAGtD,SAAS,GAAG,CAAC,CAAC,CACf,KAAM,CAACyD,OAAO,CAAEC,SAAS,CAAC,CAAGhB,gBAAgB,CAACvC,UAAU,CAACE,SAAS,CAAEF,UAAU,CAACG,WAAW,CAAC,CAC3F,KAAO,CAACG,QAAQ,CAAEC,UAAU,CAAC,CAAGgC,gBAAgB,CAACnC,MAAM,CAACE,QAAQ,EAAI,GAAG,CAAEF,MAAM,CAACG,UAAU,EAAI,GAAG,CAAC,CAClG,GAAG+C,OAAO,EAAEhD,QAAQ,EAAIiD,SAAS,EAAEhD,UAAU,CAAC,CAC5C2C,WAAW,CAAC,CAAC,CACbC,WAAW,CAAC,CAAC,CACf,CACF,CAEA,GAAGtD,SAAS,GAAG,CAAC,CAAC,CACf,GAAGO,MAAM,CAACE,QAAQ,EAAIN,UAAU,CAACE,SAAS,CAACkB,cAAc,CAAE,CACzD8B,WAAW,CAAC,CAAC,CACbC,WAAW,CAAC,CAAC,CACf,CACF,CAEA,GAAGtD,SAAS,GAAG,CAAC,CAAC,CACf,GAAGG,UAAU,CAACE,SAAS,EAAEM,OAAO,CAACF,QAAQ,EAAKN,UAAU,CAACG,WAAW,EAAEK,OAAO,CAACD,UAAU,CAAC,CACvF,GAAGC,OAAO,CAACF,QAAQ,GAAG,IAAI,EAAIE,OAAO,CAACD,UAAU,GAAG,IAAI,EAAIH,MAAM,CAACE,QAAQ,GAAG,IAAI,EAAIF,MAAM,CAACG,UAAU,GAAG,IAAI,CAAC,CAC5G,KAAM,CAAC+C,OAAO,CAAEC,SAAS,CAAC,CAAGhB,gBAAgB,CAACvC,UAAU,CAACE,SAAS,CAAEF,UAAU,CAACG,WAAW,CAAC,CAC3F,KAAM,CAACqD,UAAU,CAAEC,YAAY,CAAC,CAAGlB,gBAAgB,CAAC/B,OAAO,CAACF,QAAQ,CAAEE,OAAO,CAACD,UAAU,CAAC,CACzF,KAAM,CAACmD,SAAS,CAAEC,WAAW,CAAC,CAAGpB,gBAAgB,CAACnC,MAAM,CAACE,QAAQ,CAAEF,MAAM,CAACG,UAAU,CAAC,CAErF,GAAG+C,OAAO,EAAIE,UAAU,EAAIA,UAAU,EAAIE,SAAS,EAAIH,SAAS,EAAIE,YAAY,EAAIA,YAAY,EAAIE,WAAW,EAAIL,OAAO,EAAElD,MAAM,CAACE,QAAQ,EAAIiD,SAAS,EAAEnD,MAAM,CAACG,UAAU,CAAE,CAC3K2C,WAAW,CAAC,CAAC,CACbC,WAAW,CAAC,CAAC,CACf,CAEF,CAEF,CAEF,CAGA,GAAGD,WAAW,EAAEC,WAAW,CAAC,CAC1BpC,SAAS,CAAC,IAAI,CAAC,CACjB,CAAC,IACG,CACFA,SAAS,CAAC,KAAK,CAAC,CAClB,CACAI,iBAAiB,CAAC,IAAI,CAAC,CACzB,CAAC,CASC,mBACEzB,KAAA,QAAKkE,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC1BrE,IAAA,QAAKoE,SAAS,CAAC,gCAAgC,CAAAC,QAAA,cACzCnE,KAAA,QAAAmE,QAAA,eACInE,KAAA,QAAAmE,QAAA,EACGhE,SAAS,GAAG,CAAC,eAAIL,IAAA,CAACP,SAAS,EAACe,UAAU,CAAEA,UAAW,CAACoB,cAAc,CAAEA,cAAe,CAAChB,MAAM,CAAEA,MAAO,CAACC,SAAS,CAAEA,SAAU,CAAE,CAAC,CAC5HR,SAAS,GAAG,CAAC,eAAIL,IAAA,CAACN,SAAS,EAACc,UAAU,CAAEA,UAAW,CAACI,MAAM,CAAEA,MAAO,CAACC,SAAS,CAAEA,SAAU,CAAE,CAAC,CAC5FR,SAAS,GAAG,CAAC,eAAIL,IAAA,CAACL,SAAS,EAACa,UAAU,CAAEA,UAAW,CAACoB,cAAc,CAAEA,cAAe,CAAChB,MAAM,CAAEA,MAAO,CAACC,SAAS,CAAEA,SAAU,CAAC,CAAC,CAE3HR,SAAS,GAAG,CAAC,eAAIL,IAAA,CAACJ,SAAS,EAACY,UAAU,CAAEA,UAAW,CAACoB,cAAc,CAAEA,cAAe,CAAChB,MAAM,CAAEA,MAAO,CAACC,SAAS,CAAEA,SAAU,CAACG,OAAO,CAAEA,OAAQ,CAACC,UAAU,CAAEA,UAAW,CAACa,aAAa,CAAEA,aAAc,CAACC,gBAAgB,CAAEA,gBAAiB,CAAE,CAAC,EAEtO,CAAC,cAEN7B,KAAA,QAAKkE,SAAS,CAAC,mDAAmD,CAAAC,QAAA,eAChErE,IAAA,WAAQsE,OAAO,CAAEA,CAAA,GAAIb,WAAW,CAAC,CAAE,CAAEW,SAAS,CAAC,WAAW,CAAAC,QAAA,CAAC,OAAK,CAAQ,CAAC,cAEzErE,IAAA,WAAQsE,OAAO,CAAEA,CAAA,GAAI7B,UAAU,CAACnC,WAAW,CAAE,CAACiE,GAAG,CAAEhE,cAAe,CAAE6D,SAAS,CAAC,wBAAwB,CAAAC,QAAA,CAAC,MAAI,CAAQ,CAAC,EACjH,CAAC,EACL,CAAC,CACP,CAAC,cAENrE,IAAA,CAACH,UAAU,EAAC6B,cAAc,CAAEA,cAAe,CAAED,oBAAoB,CAAEA,oBAAqB,CAACE,iBAAiB,CAAEA,iBAAkB,CAACL,MAAM,CAAEA,MAAO,CAAE,CAAC,cAEjJtB,IAAA,CAACF,iBAAiB,EAACO,SAAS,CAAEA,SAAU,CAACmB,iBAAiB,CAAEA,iBAAkB,CAACC,oBAAoB,CAAEA,oBAAqB,CAAEE,iBAAiB,CAAEA,iBAAkB,CAACnB,UAAU,CAAEA,UAAW,CAACI,MAAM,CAAEA,MAAO,CAACgB,cAAc,CAAEA,cAAe,CAACU,UAAU,CAAEA,UAAW,CAACC,YAAY,CAAEA,YAAa,CAAC,CAAC,EAC9R,CAAC,CAEV,CAAC,CAED,cAAe,CAAApC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}